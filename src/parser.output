Nonterminals useless in grammar

    primary_expression


Terminals unused in grammar

    ASTERIX
    R_SLASH
    PLUS
    MINUS
    PERCENT
    LESS_THAN
    GREATER_THAN
    GREATER_OR_EQUAL
    LESS_OR_EQUAL
    EQUAL_TO
    NOT_EQUAL
    DECREMENT_OP
    INCREMENT_OP
    T_LOGICAL_AND
    T_LOGICAL_OR
    T_LOGICAL_RIGHT_SHIFT
    T_LOGICAL_LEFT_SHIFT
    R_SQUARE
    T_WHILE
    T_FOR
    T_DO
    T_IF
    T_ELSE
    T_CASE
    T_SWITCH
    T_BREAK
    T_VOID
    T_DOUBLE
    T_CHAR
    T_LONG
    T_FLOAT
    T_SHORT
    T_ENUM
    T_SIZEOF
    T_CONTINUE
    T_DEFAULT
    T_STRUCT
    T_SIGNED
    T_UNSIGNED
    T_TYPEDEF
    T_VOLATILE
    T_FLOAT_VAL
    T_VARIABLE
    T_INTEGER_VAL
    COLON
    DECIMAL
    AMPERSAND
    EXLAIMATION
    TILDA
    HAT
    UPRIGHT_SLASH
    QUESTION_MARK
    PTR_OP
    EQUAL
    RIGHT_ASSIGN
    LEFT_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    abstract_declarator
    inclusive_or_expression


Rules useless in grammar

   47 primary_expression: IDENTIFIER


State 13 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 root: translation_unit

    2 translation_unit: external_declaration
    3                 | translation_unit external_declaration

    4 function_definition: type_specifier IDENTIFIER L_BRACKET parameters R_BRACKET compound_statement
    5                    | type_specifier IDENTIFIER L_BRACKET R_BRACKET compound_statement

    6 identifier_list: IDENTIFIER
    7                | identifier_list COMMA IDENTIFIER

    8 external_declaration: function_definition
    9                     | declaration

   10 declaration: type_specifier SEMI_COLON
   11            | type_specifier init_declarators SEMI_COLON

   12 declarator: pointer direct_declarator
   13           | direct_declarator

   14 declarations: declaration
   15             | declarations COMMA declaration

   16 direct_declarator: IDENTIFIER
   17                  | L_BRACKET declarator R_BRACKET
   18                  | direct_declarator L_SQUARE constant_expression R_BRACKET
   19                  | direct_declarator '[' ']'
   20                  | direct_declarator '(' parameter_types ')'
   21                  | direct_declarator '(' identifier_list ')'
   22                  | direct_declarator '(' ')'

   23 parameters: parameter_declaration
   24           | parameters COMMA parameter_declaration
   25           | %empty

   26 parameter_declaration: type_specifier declarator

   27 compound_statement: L_SQUIRLY R_SQUIRLY
   28                   | L_SQUIRLY statements R_SQUIRLY
   29                   | L_SQUIRLY declarations R_SQUIRLY
   30                   | L_SQUIRLY statements declarations R_SQUIRLY

   31 return_statement: T_RETURN SEMI_COLON
   32                 | T_RETURN argument_expressions_list SEMI_COLON

   33 statement: compound_statement
   34          | return_statement

   35 statements: statement
   36           | statements statement

   37 expression: assignment_expression
   38           | expression COMMA assignment_expression

   39 argument_expressions_list: assignment_expression
   40                          | argument_expressions_list COMMA assignment_expression

   41 assignment_expression: conditional_expression
   42                      | unary_expression assignment_operator assignment_expression

   43 constant_expression: conditional_expression

   44 conditional_expression: logical_or_expression
   45                       | logical_or_expression '?' expression ':' conditional_expression

   46 type_specifier: T_INT


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 20 21 22
    ')' (41) 20 21 22
    ':' (58) 45
    '?' (63) 45
    '[' (91) 19
    ']' (93) 19
    error (256)
    ASTERIX (258)
    R_SLASH (259)
    PLUS (260)
    MINUS (261)
    PERCENT (262)
    LESS_THAN (263)
    GREATER_THAN (264)
    GREATER_OR_EQUAL (265)
    LESS_OR_EQUAL (266)
    EQUAL_TO (267)
    NOT_EQUAL (268)
    DECREMENT_OP (269)
    INCREMENT_OP (270)
    T_LOGICAL_AND (271)
    T_LOGICAL_OR (272)
    T_LOGICAL_RIGHT_SHIFT (273)
    T_LOGICAL_LEFT_SHIFT (274)
    L_BRACKET (275) 4 5 17
    R_BRACKET (276) 4 5 17 18
    L_SQUIRLY (277) 27 28 29 30
    R_SQUIRLY (278) 27 28 29 30
    L_SQUARE (279) 18
    R_SQUARE (280)
    T_WHILE (281)
    T_FOR (282)
    T_DO (283)
    T_IF (284)
    T_ELSE (285)
    T_CASE (286)
    T_SWITCH (287)
    T_BREAK (288)
    T_INT (289) 46
    T_VOID (290)
    T_DOUBLE (291)
    T_CHAR (292)
    T_LONG (293)
    T_FLOAT (294)
    T_SHORT (295)
    T_ENUM (296)
    T_SIZEOF (297)
    T_CONTINUE (298)
    T_DEFAULT (299)
    T_STRUCT (300)
    T_SIGNED (301)
    T_UNSIGNED (302)
    T_TYPEDEF (303)
    T_VOLATILE (304)
    T_RETURN (305) 31 32
    T_FLOAT_VAL (306)
    T_VARIABLE (307)
    T_INTEGER_VAL (308)
    SEMI_COLON (309) 10 11 31 32
    COMMA (310) 7 15 24 38 40
    COLON (311)
    DECIMAL (312)
    AMPERSAND (313)
    EXLAIMATION (314)
    TILDA (315)
    HAT (316)
    UPRIGHT_SLASH (317)
    QUESTION_MARK (318)
    PTR_OP (319)
    EQUAL (320)
    RIGHT_ASSIGN (321)
    LEFT_ASSIGN (322)
    ADD_ASSIGN (323)
    SUB_ASSIGN (324)
    MUL_ASSIGN (325)
    DIV_ASSIGN (326)
    MOD_ASSIGN (327)
    AND_ASSIGN (328)
    XOR_ASSIGN (329)
    OR_ASSIGN (330)
    IDENTIFIER <expr> (331) 4 5 6 7 16
    parameter_types <expr> (332) 20
    init_declarators <expr> (333) 11
    abstract_declarator <expr> (334)
    pointer <expr> (335) 12
    logical_or_expression <expr> (336) 44 45
    inclusive_or_expression <expr> (337)
    unary_expression <expr> (338) 42
    assignment_operator <expr> (339) 42


Nonterminals, with rules where they appear

    $accept (91)
        on left: 0
    root (92)
        on left: 1
        on right: 0
    translation_unit <expr> (93)
        on left: 2 3
        on right: 1 3
    function_definition <expr> (94)
        on left: 4 5
        on right: 8
    identifier_list <expr> (95)
        on left: 6 7
        on right: 7 21
    external_declaration <expr> (96)
        on left: 8 9
        on right: 2 3
    declaration <expr> (97)
        on left: 10 11
        on right: 9 14 15
    declarator <expr> (98)
        on left: 12 13
        on right: 17 26
    declarations <expr> (99)
        on left: 14 15
        on right: 15 29 30
    direct_declarator <expr> (100)
        on left: 16 17 18 19 20 21 22
        on right: 12 13 18 19 20 21 22
    parameters <expr> (101)
        on left: 23 24 25
        on right: 4 24
    parameter_declaration <expr> (102)
        on left: 26
        on right: 23 24
    compound_statement <expr> (103)
        on left: 27 28 29 30
        on right: 4 5 33
    return_statement <expr> (104)
        on left: 31 32
        on right: 34
    statement <expr> (105)
        on left: 33 34
        on right: 35 36
    statements <expr> (106)
        on left: 35 36
        on right: 28 30 36
    expression <expr> (107)
        on left: 37 38
        on right: 38 45
    argument_expressions_list <expr> (108)
        on left: 39 40
        on right: 32 40
    assignment_expression <expr> (109)
        on left: 41 42
        on right: 37 38 39 40 42
    constant_expression (110)
        on left: 43
        on right: 18
    conditional_expression <expr> (111)
        on left: 44 45
        on right: 41 43 45
    type_specifier <expr> (112)
        on left: 46
        on right: 4 5 10 11 26


State 0

    0 $accept: . root $end

    T_INT  shift, and go to state 1

    root                  go to state 2
    translation_unit      go to state 3
    function_definition   go to state 4
    external_declaration  go to state 5
    declaration           go to state 6
    type_specifier        go to state 7


State 1

   46 type_specifier: T_INT .

    $default  reduce using rule 46 (type_specifier)


State 2

    0 $accept: root . $end

    $end  shift, and go to state 8


State 3

    1 root: translation_unit .
    3 translation_unit: translation_unit . external_declaration

    T_INT  shift, and go to state 1

    $default  reduce using rule 1 (root)

    function_definition   go to state 4
    external_declaration  go to state 9
    declaration           go to state 6
    type_specifier        go to state 7


State 4

    8 external_declaration: function_definition .

    $default  reduce using rule 8 (external_declaration)


State 5

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 6

    9 external_declaration: declaration .

    $default  reduce using rule 9 (external_declaration)


State 7

    4 function_definition: type_specifier . IDENTIFIER L_BRACKET parameters R_BRACKET compound_statement
    5                    | type_specifier . IDENTIFIER L_BRACKET R_BRACKET compound_statement
   10 declaration: type_specifier . SEMI_COLON
   11            | type_specifier . init_declarators SEMI_COLON

    SEMI_COLON        shift, and go to state 10
    IDENTIFIER        shift, and go to state 11
    init_declarators  shift, and go to state 12


State 8

    0 $accept: root $end .

    $default  accept


State 9

    3 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 3 (translation_unit)


State 10

   10 declaration: type_specifier SEMI_COLON .

    $default  reduce using rule 10 (declaration)


State 11

    4 function_definition: type_specifier IDENTIFIER . L_BRACKET parameters R_BRACKET compound_statement
    5                    | type_specifier IDENTIFIER . L_BRACKET R_BRACKET compound_statement

    L_BRACKET  shift, and go to state 13


State 12

   11 declaration: type_specifier init_declarators . SEMI_COLON

    SEMI_COLON  shift, and go to state 14


State 13

    4 function_definition: type_specifier IDENTIFIER L_BRACKET . parameters R_BRACKET compound_statement
    5                    | type_specifier IDENTIFIER L_BRACKET . R_BRACKET compound_statement

    R_BRACKET  shift, and go to state 15
    T_INT      shift, and go to state 1

    R_BRACKET  [reduce using rule 25 (parameters)]
    $default   reduce using rule 25 (parameters)

    parameters             go to state 16
    parameter_declaration  go to state 17
    type_specifier         go to state 18


State 14

   11 declaration: type_specifier init_declarators SEMI_COLON .

    $default  reduce using rule 11 (declaration)


State 15

    5 function_definition: type_specifier IDENTIFIER L_BRACKET R_BRACKET . compound_statement

    L_SQUIRLY  shift, and go to state 19

    compound_statement  go to state 20


State 16

    4 function_definition: type_specifier IDENTIFIER L_BRACKET parameters . R_BRACKET compound_statement
   24 parameters: parameters . COMMA parameter_declaration

    R_BRACKET  shift, and go to state 21
    COMMA      shift, and go to state 22


State 17

   23 parameters: parameter_declaration .

    $default  reduce using rule 23 (parameters)


State 18

   26 parameter_declaration: type_specifier . declarator

    L_BRACKET   shift, and go to state 23
    IDENTIFIER  shift, and go to state 24
    pointer     shift, and go to state 25

    declarator         go to state 26
    direct_declarator  go to state 27


State 19

   27 compound_statement: L_SQUIRLY . R_SQUIRLY
   28                   | L_SQUIRLY . statements R_SQUIRLY
   29                   | L_SQUIRLY . declarations R_SQUIRLY
   30                   | L_SQUIRLY . statements declarations R_SQUIRLY

    L_SQUIRLY  shift, and go to state 19
    R_SQUIRLY  shift, and go to state 28
    T_INT      shift, and go to state 1
    T_RETURN   shift, and go to state 29

    declaration         go to state 30
    declarations        go to state 31
    compound_statement  go to state 32
    return_statement    go to state 33
    statement           go to state 34
    statements          go to state 35
    type_specifier      go to state 36


State 20

    5 function_definition: type_specifier IDENTIFIER L_BRACKET R_BRACKET compound_statement .

    $default  reduce using rule 5 (function_definition)


State 21

    4 function_definition: type_specifier IDENTIFIER L_BRACKET parameters R_BRACKET . compound_statement

    L_SQUIRLY  shift, and go to state 19

    compound_statement  go to state 37


State 22

   24 parameters: parameters COMMA . parameter_declaration

    T_INT  shift, and go to state 1

    parameter_declaration  go to state 38
    type_specifier         go to state 18


State 23

   17 direct_declarator: L_BRACKET . declarator R_BRACKET

    L_BRACKET   shift, and go to state 23
    IDENTIFIER  shift, and go to state 24
    pointer     shift, and go to state 25

    declarator         go to state 39
    direct_declarator  go to state 27


State 24

   16 direct_declarator: IDENTIFIER .

    $default  reduce using rule 16 (direct_declarator)


State 25

   12 declarator: pointer . direct_declarator

    L_BRACKET   shift, and go to state 23
    IDENTIFIER  shift, and go to state 24

    direct_declarator  go to state 40


State 26

   26 parameter_declaration: type_specifier declarator .

    $default  reduce using rule 26 (parameter_declaration)


State 27

   13 declarator: direct_declarator .
   18 direct_declarator: direct_declarator . L_SQUARE constant_expression R_BRACKET
   19                  | direct_declarator . '[' ']'
   20                  | direct_declarator . '(' parameter_types ')'
   21                  | direct_declarator . '(' identifier_list ')'
   22                  | direct_declarator . '(' ')'

    L_SQUARE  shift, and go to state 41
    '['       shift, and go to state 42
    '('       shift, and go to state 43

    $default  reduce using rule 13 (declarator)


State 28

   27 compound_statement: L_SQUIRLY R_SQUIRLY .

    $default  reduce using rule 27 (compound_statement)


State 29

   31 return_statement: T_RETURN . SEMI_COLON
   32                 | T_RETURN . argument_expressions_list SEMI_COLON

    SEMI_COLON             shift, and go to state 44
    logical_or_expression  shift, and go to state 45
    unary_expression       shift, and go to state 46

    argument_expressions_list  go to state 47
    assignment_expression      go to state 48
    conditional_expression     go to state 49


State 30

   14 declarations: declaration .

    $default  reduce using rule 14 (declarations)


State 31

   15 declarations: declarations . COMMA declaration
   29 compound_statement: L_SQUIRLY declarations . R_SQUIRLY

    R_SQUIRLY  shift, and go to state 50
    COMMA      shift, and go to state 51


State 32

   33 statement: compound_statement .

    $default  reduce using rule 33 (statement)


State 33

   34 statement: return_statement .

    $default  reduce using rule 34 (statement)


State 34

   35 statements: statement .

    $default  reduce using rule 35 (statements)


State 35

   28 compound_statement: L_SQUIRLY statements . R_SQUIRLY
   30                   | L_SQUIRLY statements . declarations R_SQUIRLY
   36 statements: statements . statement

    L_SQUIRLY  shift, and go to state 19
    R_SQUIRLY  shift, and go to state 52
    T_INT      shift, and go to state 1
    T_RETURN   shift, and go to state 29

    declaration         go to state 30
    declarations        go to state 53
    compound_statement  go to state 32
    return_statement    go to state 33
    statement           go to state 54
    type_specifier      go to state 36


State 36

   10 declaration: type_specifier . SEMI_COLON
   11            | type_specifier . init_declarators SEMI_COLON

    SEMI_COLON        shift, and go to state 10
    init_declarators  shift, and go to state 12


State 37

    4 function_definition: type_specifier IDENTIFIER L_BRACKET parameters R_BRACKET compound_statement .

    $default  reduce using rule 4 (function_definition)


State 38

   24 parameters: parameters COMMA parameter_declaration .

    $default  reduce using rule 24 (parameters)


State 39

   17 direct_declarator: L_BRACKET declarator . R_BRACKET

    R_BRACKET  shift, and go to state 55


State 40

   12 declarator: pointer direct_declarator .
   18 direct_declarator: direct_declarator . L_SQUARE constant_expression R_BRACKET
   19                  | direct_declarator . '[' ']'
   20                  | direct_declarator . '(' parameter_types ')'
   21                  | direct_declarator . '(' identifier_list ')'
   22                  | direct_declarator . '(' ')'

    L_SQUARE  shift, and go to state 41
    '['       shift, and go to state 42
    '('       shift, and go to state 43

    $default  reduce using rule 12 (declarator)


State 41

   18 direct_declarator: direct_declarator L_SQUARE . constant_expression R_BRACKET

    logical_or_expression  shift, and go to state 45

    constant_expression     go to state 56
    conditional_expression  go to state 57


State 42

   19 direct_declarator: direct_declarator '[' . ']'

    ']'  shift, and go to state 58


State 43

   20 direct_declarator: direct_declarator '(' . parameter_types ')'
   21                  | direct_declarator '(' . identifier_list ')'
   22                  | direct_declarator '(' . ')'

    IDENTIFIER       shift, and go to state 59
    parameter_types  shift, and go to state 60
    ')'              shift, and go to state 61

    identifier_list  go to state 62


State 44

   31 return_statement: T_RETURN SEMI_COLON .

    $default  reduce using rule 31 (return_statement)


State 45

   44 conditional_expression: logical_or_expression .
   45                       | logical_or_expression . '?' expression ':' conditional_expression

    '?'  shift, and go to state 63

    $default  reduce using rule 44 (conditional_expression)


State 46

   42 assignment_expression: unary_expression . assignment_operator assignment_expression

    assignment_operator  shift, and go to state 64


State 47

   32 return_statement: T_RETURN argument_expressions_list . SEMI_COLON
   40 argument_expressions_list: argument_expressions_list . COMMA assignment_expression

    SEMI_COLON  shift, and go to state 65
    COMMA       shift, and go to state 66


State 48

   39 argument_expressions_list: assignment_expression .

    $default  reduce using rule 39 (argument_expressions_list)


State 49

   41 assignment_expression: conditional_expression .

    $default  reduce using rule 41 (assignment_expression)


State 50

   29 compound_statement: L_SQUIRLY declarations R_SQUIRLY .

    $default  reduce using rule 29 (compound_statement)


State 51

   15 declarations: declarations COMMA . declaration

    T_INT  shift, and go to state 1

    declaration     go to state 67
    type_specifier  go to state 36


State 52

   28 compound_statement: L_SQUIRLY statements R_SQUIRLY .

    $default  reduce using rule 28 (compound_statement)


State 53

   15 declarations: declarations . COMMA declaration
   30 compound_statement: L_SQUIRLY statements declarations . R_SQUIRLY

    R_SQUIRLY  shift, and go to state 68
    COMMA      shift, and go to state 51


State 54

   36 statements: statements statement .

    $default  reduce using rule 36 (statements)


State 55

   17 direct_declarator: L_BRACKET declarator R_BRACKET .

    $default  reduce using rule 17 (direct_declarator)


State 56

   18 direct_declarator: direct_declarator L_SQUARE constant_expression . R_BRACKET

    R_BRACKET  shift, and go to state 69


State 57

   43 constant_expression: conditional_expression .

    $default  reduce using rule 43 (constant_expression)


State 58

   19 direct_declarator: direct_declarator '[' ']' .

    $default  reduce using rule 19 (direct_declarator)


State 59

    6 identifier_list: IDENTIFIER .

    $default  reduce using rule 6 (identifier_list)


State 60

   20 direct_declarator: direct_declarator '(' parameter_types . ')'

    ')'  shift, and go to state 70


State 61

   22 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 22 (direct_declarator)


State 62

    7 identifier_list: identifier_list . COMMA IDENTIFIER
   21 direct_declarator: direct_declarator '(' identifier_list . ')'

    COMMA  shift, and go to state 71
    ')'    shift, and go to state 72


State 63

   45 conditional_expression: logical_or_expression '?' . expression ':' conditional_expression

    logical_or_expression  shift, and go to state 45
    unary_expression       shift, and go to state 46

    expression              go to state 73
    assignment_expression   go to state 74
    conditional_expression  go to state 49


State 64

   42 assignment_expression: unary_expression assignment_operator . assignment_expression

    logical_or_expression  shift, and go to state 45
    unary_expression       shift, and go to state 46

    assignment_expression   go to state 75
    conditional_expression  go to state 49


State 65

   32 return_statement: T_RETURN argument_expressions_list SEMI_COLON .

    $default  reduce using rule 32 (return_statement)


State 66

   40 argument_expressions_list: argument_expressions_list COMMA . assignment_expression

    logical_or_expression  shift, and go to state 45
    unary_expression       shift, and go to state 46

    assignment_expression   go to state 76
    conditional_expression  go to state 49


State 67

   15 declarations: declarations COMMA declaration .

    $default  reduce using rule 15 (declarations)


State 68

   30 compound_statement: L_SQUIRLY statements declarations R_SQUIRLY .

    $default  reduce using rule 30 (compound_statement)


State 69

   18 direct_declarator: direct_declarator L_SQUARE constant_expression R_BRACKET .

    $default  reduce using rule 18 (direct_declarator)


State 70

   20 direct_declarator: direct_declarator '(' parameter_types ')' .

    $default  reduce using rule 20 (direct_declarator)


State 71

    7 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 77


State 72

   21 direct_declarator: direct_declarator '(' identifier_list ')' .

    $default  reduce using rule 21 (direct_declarator)


State 73

   38 expression: expression . COMMA assignment_expression
   45 conditional_expression: logical_or_expression '?' expression . ':' conditional_expression

    COMMA  shift, and go to state 78
    ':'    shift, and go to state 79


State 74

   37 expression: assignment_expression .

    $default  reduce using rule 37 (expression)


State 75

   42 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 42 (assignment_expression)


State 76

   40 argument_expressions_list: argument_expressions_list COMMA assignment_expression .

    $default  reduce using rule 40 (argument_expressions_list)


State 77

    7 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 7 (identifier_list)


State 78

   38 expression: expression COMMA . assignment_expression

    logical_or_expression  shift, and go to state 45
    unary_expression       shift, and go to state 46

    assignment_expression   go to state 80
    conditional_expression  go to state 49


State 79

   45 conditional_expression: logical_or_expression '?' expression ':' . conditional_expression

    logical_or_expression  shift, and go to state 45

    conditional_expression  go to state 81


State 80

   38 expression: expression COMMA assignment_expression .

    $default  reduce using rule 38 (expression)


State 81

   45 conditional_expression: logical_or_expression '?' expression ':' conditional_expression .

    $default  reduce using rule 45 (conditional_expression)
