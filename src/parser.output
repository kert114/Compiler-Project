Terminals unused in grammar

<<<<<<< HEAD
=======
    EQUAL_TO
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
    L_SQUARE
    R_SQUARE
    T_WHILE
    T_FOR
    T_DO
    TILDA
    T_IF
    T_ELSE
    T_CASE
    T_SWITCH
    T_BREAK
    T_VOID
    T_DOUBLE
    T_CHAR
    T_LONG
    T_FLOAT
    T_SHORT
    T_ENUM
    T_CONTINUE
    T_DEFAULT
    T_STRUCT
    T_SIGNED
    T_UNSIGNED
    T_TYPEDEF
    T_VOLATILE
    T_FLOAT_VAL
    T_VARIABLE
    DECIMAL
    EXCLAIMATION
    PTR_OP
    CONSTANT


<<<<<<< HEAD
=======
State 35 conflicts: 1 shift/reduce


>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
Grammar

    0 $accept: root $end

    1 root: translation_unit

    2 translation_unit: external_declaration
    3                 | translation_unit external_declaration

    4 external_declaration: function_definition
    5                     | declaration

    6 function_definition: T_INT IDENTIFIER L_BRACKET R_BRACKET compound_statement
    7                    | T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET compound_statement

    8 declarations: declaration
    9             | declarations declaration

   10 declaration: T_INT IDENTIFIER SEMI_COLON
   11            | T_INT IDENTIFIER EQUAL expression SEMI_COLON
   12            | IDENTIFIER EQUAL expression SEMI_COLON

   13 statements: statement
   14           | statements statement

   15 statement: compound_statement
   16          | return_statement

   17 compound_statement: L_SQUILY R_SQUIRLY
   18                   | L_SQUILY statements R_SQUIRLY
   19                   | L_SQUILY declarations R_SQUIRLY
   20                   | L_SQUILY declarations statements R_SQUIRLY

   21 return_statement: T_RETURN SEMI_COLON
   22                 | T_RETURN expression SEMI_COLON

   23 assignment_operator: EQUAL
   24                    | MUL_ASSIGN
   25                    | DIV_ASSIGN
   26                    | MOD_ASSIGN
   27                    | ADD_ASSIGN
   28                    | SUB_ASSIGN
   29                    | LEFT_ASSIGN
   30                    | RIGHT_ASSIGN
   31                    | AND_ASSIGN
   32                    | XOR_ASSIGN
   33                    | OR_ASSIGN

   34 primary_expression: IDENTIFIER
   35                   | T_INTEGER_VAL
   36                   | '(' expression ')'

   37 expression: assignment_expression

   38 assignment_expression: conditional_expression
   39                      | unary_expression assignment_operator assignment_expression

   40 conditional_expression: logical_or_expression
   41                       | logical_or_expression QUESTION_MARK expression COLON conditional_expression

   42 logical_or_expression: logical_and_expression
   43                      | logical_or_expression T_LOGICAL_OR logical_and_expression

   44 logical_and_expression: inclusive_or_expression
   45                       | logical_and_expression T_LOGICAL_AND inclusive_or_expression

   46 inclusive_or_expression: exclusive_or_expression
   47                        | inclusive_or_expression UPRIGHT_SLASH exclusive_or_expression

   48 exclusive_or_expression: and_expression
   49                        | exclusive_or_expression HAT and_expression

   50 and_expression: equality_expression
   51               | and_expression AMPERSAND equality_expression

   52 equality_expression: relational_expression
<<<<<<< HEAD
   53                    | equality_expression EQUAL_TO relational_expression
=======
   53                    | equality_expression EQUAL relational_expression
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
   54                    | equality_expression NOT_EQUAL relational_expression

   55 relational_expression: shift_expression
   56                      | relational_expression LESS_THAN shift_expression
   57                      | relational_expression GREATER_THAN shift_expression
   58                      | relational_expression LESS_OR_EQUAL shift_expression
   59                      | relational_expression GREATER_OR_EQUAL shift_expression

   60 shift_expression: additive_expression
   61                 | shift_expression T_LOGICAL_LEFT_SHIFT additive_expression
   62                 | shift_expression T_LOGICAL_RIGHT_SHIFT additive_expression

   63 additive_expression: multiplicative_expression
   64                    | additive_expression PLUS multiplicative_expression
   65                    | additive_expression MINUS multiplicative_expression

   66 multiplicative_expression: unary_expression
   67                          | multiplicative_expression ASTERIX unary_expression
   68                          | multiplicative_expression R_SLASH unary_expression
   69                          | multiplicative_expression PERCENT unary_expression

   70 unary_expression: primary_expression
   71                 | INCREMENT_OP unary_expression
   72                 | DECREMENT_OP unary_expression
   73                 | T_SIZEOF unary_expression


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 36
    ')' (41) 36
    error (256)
    ASTERIX <string> (258) 67
    R_SLASH <string> (259) 68
    PLUS <string> (260) 64
    MINUS <string> (261) 65
    PERCENT <string> (262) 69
    LESS_THAN <string> (263) 56
    GREATER_THAN <string> (264) 57
    GREATER_OR_EQUAL <string> (265) 59
    LESS_OR_EQUAL <string> (266) 58
<<<<<<< HEAD
    EQUAL_TO (267) 53
=======
    EQUAL_TO (267)
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
    NOT_EQUAL <string> (268) 54
    DECREMENT_OP <string> (269) 72
    INCREMENT_OP <string> (270) 71
    T_LOGICAL_AND <string> (271) 45
    T_LOGICAL_OR <string> (272) 43
    T_LOGICAL_RIGHT_SHIFT <string> (273) 62
    T_LOGICAL_LEFT_SHIFT <string> (274) 61
    L_BRACKET (275) 6 7
    R_BRACKET (276) 6 7
    R_SQUIRLY (277) 17 18 19 20
    L_SQUARE (278)
    R_SQUARE (279)
    T_WHILE (280)
    T_FOR (281)
    T_DO (282)
    TILDA (283)
    L_SQUILY (284) 17 18 19 20
    T_IF (285)
    T_ELSE (286)
    T_CASE (287)
    T_SWITCH (288)
    T_BREAK (289)
    T_INT <string> (290) 6 7 10 11
    T_VOID (291)
    T_DOUBLE (292)
    T_CHAR (293)
    T_LONG (294)
    T_FLOAT (295)
    T_SHORT (296)
    T_ENUM (297)
    T_SIZEOF <string> (298) 73
    T_CONTINUE (299)
    T_DEFAULT (300)
    T_STRUCT (301)
    T_SIGNED (302)
    T_UNSIGNED (303)
    T_TYPEDEF (304)
    T_VOLATILE (305)
    T_RETURN (306) 21 22
    T_FLOAT_VAL (307)
    T_VARIABLE (308)
    SEMI_COLON (309) 10 11 12 21 22
    COMMA (310) 7
    COLON (311) 41
    DECIMAL (312)
    AMPERSAND <string> (313) 51
    EXCLAIMATION <string> (314)
    HAT <string> (315) 49
    UPRIGHT_SLASH (316) 47
    QUESTION_MARK <string> (317) 41
    PTR_OP (318)
<<<<<<< HEAD
    EQUAL <string> (319) 11 12 23
=======
    EQUAL <string> (319) 11 12 23 53
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
    RIGHT_ASSIGN <string> (320) 30
    LEFT_ASSIGN <string> (321) 29
    ADD_ASSIGN <string> (322) 27
    SUB_ASSIGN <string> (323) 28
    MUL_ASSIGN <string> (324) 24
    DIV_ASSIGN <string> (325) 25
    MOD_ASSIGN <string> (326) 26
    AND_ASSIGN <string> (327) 31
    XOR_ASSIGN <string> (328) 32
    OR_ASSIGN <string> (329) 33
    IDENTIFIER <string> (330) 6 7 10 11 12 34
    CONSTANT (331)
    T_INTEGER_VAL <number> (332) 35


Nonterminals, with rules where they appear

    $accept (80)
        on left: 0
    root (81)
        on left: 1
        on right: 0
    translation_unit <expr_list_vector> (82)
        on left: 2 3
        on right: 1 3
    external_declaration <expr> (83)
        on left: 4 5
        on right: 2 3
    function_definition <expr> (84)
        on left: 6 7
        on right: 4
    declarations <declaration_list_vector> (85)
        on left: 8 9
        on right: 9 19 20
    declaration <declaration_node> (86)
        on left: 10 11 12
        on right: 5 8 9
    statements <statement_list_vector> (87)
        on left: 13 14
        on right: 14 18 20
    statement <statement_node> (88)
        on left: 15 16
        on right: 13 14
    compound_statement <statement_node> (89)
        on left: 17 18 19 20
        on right: 6 7 15
    return_statement <statement_node> (90)
        on left: 21 22
        on right: 16
    assignment_operator <string> (91)
        on left: 23 24 25 26 27 28 29 30 31 32 33
        on right: 39
    primary_expression <expr> (92)
        on left: 34 35 36
        on right: 70
    expression <expr> (93)
        on left: 37
        on right: 11 12 22 36 41
    assignment_expression <expr> (94)
        on left: 38 39
        on right: 37 39
    conditional_expression <expr> (95)
        on left: 40 41
        on right: 38 41
    logical_or_expression <expr> (96)
        on left: 42 43
        on right: 40 41 43
    logical_and_expression <expr> (97)
        on left: 44 45
        on right: 42 43 45
    inclusive_or_expression <expr> (98)
        on left: 46 47
        on right: 44 45 47
    exclusive_or_expression <expr> (99)
        on left: 48 49
        on right: 46 47 49
    and_expression <expr> (100)
        on left: 50 51
        on right: 48 49 51
    equality_expression <expr> (101)
        on left: 52 53 54
        on right: 50 51 53 54
    relational_expression <expr> (102)
        on left: 55 56 57 58 59
        on right: 52 53 54 56 57 58 59
    shift_expression <expr> (103)
        on left: 60 61 62
        on right: 55 56 57 58 59 61 62
    additive_expression <expr> (104)
        on left: 63 64 65
        on right: 60 61 62 64 65
    multiplicative_expression <expr> (105)
        on left: 66 67 68 69
        on right: 63 64 65 67 68 69
    unary_expression <expr> (106)
        on left: 70 71 72 73
        on right: 39 66 67 68 69 71 72 73


State 0

    0 $accept: . root $end

    T_INT       shift, and go to state 1
    IDENTIFIER  shift, and go to state 2

    root                  go to state 3
    translation_unit      go to state 4
    external_declaration  go to state 5
    function_definition   go to state 6
    declaration           go to state 7


State 1

    6 function_definition: T_INT . IDENTIFIER L_BRACKET R_BRACKET compound_statement
    7                    | T_INT . IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET compound_statement
   10 declaration: T_INT . IDENTIFIER SEMI_COLON
   11            | T_INT . IDENTIFIER EQUAL expression SEMI_COLON

    IDENTIFIER  shift, and go to state 8


State 2

   12 declaration: IDENTIFIER . EQUAL expression SEMI_COLON

    EQUAL  shift, and go to state 9


State 3

    0 $accept: root . $end

    $end  shift, and go to state 10


State 4

    1 root: translation_unit .
    3 translation_unit: translation_unit . external_declaration

    T_INT       shift, and go to state 1
    IDENTIFIER  shift, and go to state 2

    $default  reduce using rule 1 (root)

    external_declaration  go to state 11
    function_definition   go to state 6
    declaration           go to state 7


State 5

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 6

    4 external_declaration: function_definition .

    $default  reduce using rule 4 (external_declaration)


State 7

    5 external_declaration: declaration .

    $default  reduce using rule 5 (external_declaration)


State 8

    6 function_definition: T_INT IDENTIFIER . L_BRACKET R_BRACKET compound_statement
    7                    | T_INT IDENTIFIER . L_BRACKET T_INT IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET compound_statement
   10 declaration: T_INT IDENTIFIER . SEMI_COLON
   11            | T_INT IDENTIFIER . EQUAL expression SEMI_COLON

    L_BRACKET   shift, and go to state 12
    SEMI_COLON  shift, and go to state 13
    EQUAL       shift, and go to state 14


State 9

   12 declaration: IDENTIFIER EQUAL . expression SEMI_COLON

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    expression                 go to state 22
    assignment_expression      go to state 23
    conditional_expression     go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 35


State 10

    0 $accept: root $end .

    $default  accept


State 11

    3 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 3 (translation_unit)


State 12

    6 function_definition: T_INT IDENTIFIER L_BRACKET . R_BRACKET compound_statement
    7                    | T_INT IDENTIFIER L_BRACKET . T_INT IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET compound_statement

    R_BRACKET  shift, and go to state 36
    T_INT      shift, and go to state 37


State 13

   10 declaration: T_INT IDENTIFIER SEMI_COLON .

    $default  reduce using rule 10 (declaration)


State 14

   11 declaration: T_INT IDENTIFIER EQUAL . expression SEMI_COLON

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    expression                 go to state 38
    assignment_expression      go to state 23
    conditional_expression     go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 35


State 15

   72 unary_expression: DECREMENT_OP . unary_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression  go to state 21
    unary_expression    go to state 39


State 16

   71 unary_expression: INCREMENT_OP . unary_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression  go to state 21
    unary_expression    go to state 40


State 17

   73 unary_expression: T_SIZEOF . unary_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression  go to state 21
    unary_expression    go to state 41


State 18

   34 primary_expression: IDENTIFIER .

    $default  reduce using rule 34 (primary_expression)


State 19

   35 primary_expression: T_INTEGER_VAL .

    $default  reduce using rule 35 (primary_expression)


State 20

   36 primary_expression: '(' . expression ')'

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    expression                 go to state 42
    assignment_expression      go to state 23
    conditional_expression     go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 35


State 21

   70 unary_expression: primary_expression .

    $default  reduce using rule 70 (unary_expression)


State 22

   12 declaration: IDENTIFIER EQUAL expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 43


State 23

   37 expression: assignment_expression .

    $default  reduce using rule 37 (expression)


State 24

   38 assignment_expression: conditional_expression .

    $default  reduce using rule 38 (assignment_expression)


State 25

   40 conditional_expression: logical_or_expression .
   41                       | logical_or_expression . QUESTION_MARK expression COLON conditional_expression
   43 logical_or_expression: logical_or_expression . T_LOGICAL_OR logical_and_expression

    T_LOGICAL_OR   shift, and go to state 44
    QUESTION_MARK  shift, and go to state 45

    $default  reduce using rule 40 (conditional_expression)


State 26

   42 logical_or_expression: logical_and_expression .
   45 logical_and_expression: logical_and_expression . T_LOGICAL_AND inclusive_or_expression

    T_LOGICAL_AND  shift, and go to state 46

    $default  reduce using rule 42 (logical_or_expression)


State 27

   44 logical_and_expression: inclusive_or_expression .
   47 inclusive_or_expression: inclusive_or_expression . UPRIGHT_SLASH exclusive_or_expression

    UPRIGHT_SLASH  shift, and go to state 47

    $default  reduce using rule 44 (logical_and_expression)


State 28

   46 inclusive_or_expression: exclusive_or_expression .
   49 exclusive_or_expression: exclusive_or_expression . HAT and_expression

    HAT  shift, and go to state 48

    $default  reduce using rule 46 (inclusive_or_expression)


State 29

   48 exclusive_or_expression: and_expression .
   51 and_expression: and_expression . AMPERSAND equality_expression

    AMPERSAND  shift, and go to state 49

    $default  reduce using rule 48 (exclusive_or_expression)


State 30

   50 and_expression: equality_expression .
<<<<<<< HEAD
   53 equality_expression: equality_expression . EQUAL_TO relational_expression
   54                    | equality_expression . NOT_EQUAL relational_expression

    EQUAL_TO   shift, and go to state 50
    NOT_EQUAL  shift, and go to state 51
=======
   53 equality_expression: equality_expression . EQUAL relational_expression
   54                    | equality_expression . NOT_EQUAL relational_expression

    NOT_EQUAL  shift, and go to state 50
    EQUAL      shift, and go to state 51
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e

    $default  reduce using rule 50 (and_expression)


State 31

   52 equality_expression: relational_expression .
   56 relational_expression: relational_expression . LESS_THAN shift_expression
   57                      | relational_expression . GREATER_THAN shift_expression
   58                      | relational_expression . LESS_OR_EQUAL shift_expression
   59                      | relational_expression . GREATER_OR_EQUAL shift_expression

    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    GREATER_OR_EQUAL  shift, and go to state 54
    LESS_OR_EQUAL     shift, and go to state 55

    $default  reduce using rule 52 (equality_expression)


State 32

   55 relational_expression: shift_expression .
   61 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   62                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 56
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 57

    $default  reduce using rule 55 (relational_expression)


State 33

   60 shift_expression: additive_expression .
   64 additive_expression: additive_expression . PLUS multiplicative_expression
   65                    | additive_expression . MINUS multiplicative_expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    $default  reduce using rule 60 (shift_expression)


State 34

   63 additive_expression: multiplicative_expression .
   67 multiplicative_expression: multiplicative_expression . ASTERIX unary_expression
   68                          | multiplicative_expression . R_SLASH unary_expression
   69                          | multiplicative_expression . PERCENT unary_expression

    ASTERIX  shift, and go to state 60
    R_SLASH  shift, and go to state 61
    PERCENT  shift, and go to state 62

    $default  reduce using rule 63 (additive_expression)


State 35

   39 assignment_expression: unary_expression . assignment_operator assignment_expression
   66 multiplicative_expression: unary_expression .

    EQUAL         shift, and go to state 63
    RIGHT_ASSIGN  shift, and go to state 64
    LEFT_ASSIGN   shift, and go to state 65
    ADD_ASSIGN    shift, and go to state 66
    SUB_ASSIGN    shift, and go to state 67
    MUL_ASSIGN    shift, and go to state 68
    DIV_ASSIGN    shift, and go to state 69
    MOD_ASSIGN    shift, and go to state 70
    AND_ASSIGN    shift, and go to state 71
    XOR_ASSIGN    shift, and go to state 72
    OR_ASSIGN     shift, and go to state 73

<<<<<<< HEAD
=======
    EQUAL     [reduce using rule 66 (multiplicative_expression)]
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
    $default  reduce using rule 66 (multiplicative_expression)

    assignment_operator  go to state 74


State 36

    6 function_definition: T_INT IDENTIFIER L_BRACKET R_BRACKET . compound_statement

    L_SQUILY  shift, and go to state 75

    compound_statement  go to state 76


State 37

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT . IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET compound_statement

    IDENTIFIER  shift, and go to state 77


State 38

   11 declaration: T_INT IDENTIFIER EQUAL expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 78


State 39

   72 unary_expression: DECREMENT_OP unary_expression .

    $default  reduce using rule 72 (unary_expression)


State 40

   71 unary_expression: INCREMENT_OP unary_expression .

    $default  reduce using rule 71 (unary_expression)


State 41

   73 unary_expression: T_SIZEOF unary_expression .

    $default  reduce using rule 73 (unary_expression)


State 42

   36 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 79


State 43

   12 declaration: IDENTIFIER EQUAL expression SEMI_COLON .

    $default  reduce using rule 12 (declaration)


State 44

   43 logical_or_expression: logical_or_expression T_LOGICAL_OR . logical_and_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    logical_and_expression     go to state 80
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 45

   41 conditional_expression: logical_or_expression QUESTION_MARK . expression COLON conditional_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    expression                 go to state 82
    assignment_expression      go to state 23
    conditional_expression     go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 35


State 46

   45 logical_and_expression: logical_and_expression T_LOGICAL_AND . inclusive_or_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    inclusive_or_expression    go to state 83
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 47

   47 inclusive_or_expression: inclusive_or_expression UPRIGHT_SLASH . exclusive_or_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    exclusive_or_expression    go to state 84
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 48

   49 exclusive_or_expression: exclusive_or_expression HAT . and_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    and_expression             go to state 85
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 49

   51 and_expression: and_expression AMPERSAND . equality_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    equality_expression        go to state 86
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 50

<<<<<<< HEAD
   53 equality_expression: equality_expression EQUAL_TO . relational_expression
=======
   54 equality_expression: equality_expression NOT_EQUAL . relational_expression
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    relational_expression      go to state 87
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 51

<<<<<<< HEAD
   54 equality_expression: equality_expression NOT_EQUAL . relational_expression
=======
   53 equality_expression: equality_expression EQUAL . relational_expression
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    relational_expression      go to state 88
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 52

   56 relational_expression: relational_expression LESS_THAN . shift_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    shift_expression           go to state 89
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 53

   57 relational_expression: relational_expression GREATER_THAN . shift_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    shift_expression           go to state 90
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 54

   59 relational_expression: relational_expression GREATER_OR_EQUAL . shift_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    shift_expression           go to state 91
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 55

   58 relational_expression: relational_expression LESS_OR_EQUAL . shift_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    shift_expression           go to state 92
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 56

   62 shift_expression: shift_expression T_LOGICAL_RIGHT_SHIFT . additive_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    additive_expression        go to state 93
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 57

   61 shift_expression: shift_expression T_LOGICAL_LEFT_SHIFT . additive_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    additive_expression        go to state 94
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 58

   64 additive_expression: additive_expression PLUS . multiplicative_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    multiplicative_expression  go to state 95
    unary_expression           go to state 81


State 59

   65 additive_expression: additive_expression MINUS . multiplicative_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    multiplicative_expression  go to state 96
    unary_expression           go to state 81


State 60

   67 multiplicative_expression: multiplicative_expression ASTERIX . unary_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression  go to state 21
    unary_expression    go to state 97


State 61

   68 multiplicative_expression: multiplicative_expression R_SLASH . unary_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression  go to state 21
    unary_expression    go to state 98


State 62

   69 multiplicative_expression: multiplicative_expression PERCENT . unary_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression  go to state 21
    unary_expression    go to state 99


State 63

   23 assignment_operator: EQUAL .

    $default  reduce using rule 23 (assignment_operator)


State 64

   30 assignment_operator: RIGHT_ASSIGN .

    $default  reduce using rule 30 (assignment_operator)


State 65

   29 assignment_operator: LEFT_ASSIGN .

    $default  reduce using rule 29 (assignment_operator)


State 66

   27 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 27 (assignment_operator)


State 67

   28 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 28 (assignment_operator)


State 68

   24 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 24 (assignment_operator)


State 69

   25 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 25 (assignment_operator)


State 70

   26 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 26 (assignment_operator)


State 71

   31 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 31 (assignment_operator)


State 72

   32 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 32 (assignment_operator)


State 73

   33 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 33 (assignment_operator)


State 74

   39 assignment_expression: unary_expression assignment_operator . assignment_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    assignment_expression      go to state 100
    conditional_expression     go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 35


State 75

   17 compound_statement: L_SQUILY . R_SQUIRLY
   18                   | L_SQUILY . statements R_SQUIRLY
   19                   | L_SQUILY . declarations R_SQUIRLY
   20                   | L_SQUILY . declarations statements R_SQUIRLY

    R_SQUIRLY   shift, and go to state 101
    L_SQUILY    shift, and go to state 75
    T_INT       shift, and go to state 102
    T_RETURN    shift, and go to state 103
    IDENTIFIER  shift, and go to state 2

    declarations        go to state 104
    declaration         go to state 105
    statements          go to state 106
    statement           go to state 107
    compound_statement  go to state 108
    return_statement    go to state 109


State 76

    6 function_definition: T_INT IDENTIFIER L_BRACKET R_BRACKET compound_statement .

    $default  reduce using rule 6 (function_definition)


State 77

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER . COMMA T_INT IDENTIFIER R_BRACKET compound_statement

    COMMA  shift, and go to state 110


State 78

   11 declaration: T_INT IDENTIFIER EQUAL expression SEMI_COLON .

    $default  reduce using rule 11 (declaration)


State 79

   36 primary_expression: '(' expression ')' .

    $default  reduce using rule 36 (primary_expression)


State 80

   43 logical_or_expression: logical_or_expression T_LOGICAL_OR logical_and_expression .
   45 logical_and_expression: logical_and_expression . T_LOGICAL_AND inclusive_or_expression

    T_LOGICAL_AND  shift, and go to state 46

    $default  reduce using rule 43 (logical_or_expression)


State 81

   66 multiplicative_expression: unary_expression .

    $default  reduce using rule 66 (multiplicative_expression)


State 82

   41 conditional_expression: logical_or_expression QUESTION_MARK expression . COLON conditional_expression

    COLON  shift, and go to state 111


State 83

   45 logical_and_expression: logical_and_expression T_LOGICAL_AND inclusive_or_expression .
   47 inclusive_or_expression: inclusive_or_expression . UPRIGHT_SLASH exclusive_or_expression

    UPRIGHT_SLASH  shift, and go to state 47

    $default  reduce using rule 45 (logical_and_expression)


State 84

   47 inclusive_or_expression: inclusive_or_expression UPRIGHT_SLASH exclusive_or_expression .
   49 exclusive_or_expression: exclusive_or_expression . HAT and_expression

    HAT  shift, and go to state 48

    $default  reduce using rule 47 (inclusive_or_expression)


State 85

   49 exclusive_or_expression: exclusive_or_expression HAT and_expression .
   51 and_expression: and_expression . AMPERSAND equality_expression

    AMPERSAND  shift, and go to state 49

    $default  reduce using rule 49 (exclusive_or_expression)


State 86

   51 and_expression: and_expression AMPERSAND equality_expression .
<<<<<<< HEAD
   53 equality_expression: equality_expression . EQUAL_TO relational_expression
   54                    | equality_expression . NOT_EQUAL relational_expression

    EQUAL_TO   shift, and go to state 50
    NOT_EQUAL  shift, and go to state 51
=======
   53 equality_expression: equality_expression . EQUAL relational_expression
   54                    | equality_expression . NOT_EQUAL relational_expression

    NOT_EQUAL  shift, and go to state 50
    EQUAL      shift, and go to state 51
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e

    $default  reduce using rule 51 (and_expression)


State 87

<<<<<<< HEAD
   53 equality_expression: equality_expression EQUAL_TO relational_expression .
=======
   54 equality_expression: equality_expression NOT_EQUAL relational_expression .
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
   56 relational_expression: relational_expression . LESS_THAN shift_expression
   57                      | relational_expression . GREATER_THAN shift_expression
   58                      | relational_expression . LESS_OR_EQUAL shift_expression
   59                      | relational_expression . GREATER_OR_EQUAL shift_expression

    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    GREATER_OR_EQUAL  shift, and go to state 54
    LESS_OR_EQUAL     shift, and go to state 55

<<<<<<< HEAD
    $default  reduce using rule 53 (equality_expression)
=======
    $default  reduce using rule 54 (equality_expression)
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e


State 88

<<<<<<< HEAD
   54 equality_expression: equality_expression NOT_EQUAL relational_expression .
=======
   53 equality_expression: equality_expression EQUAL relational_expression .
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e
   56 relational_expression: relational_expression . LESS_THAN shift_expression
   57                      | relational_expression . GREATER_THAN shift_expression
   58                      | relational_expression . LESS_OR_EQUAL shift_expression
   59                      | relational_expression . GREATER_OR_EQUAL shift_expression

    LESS_THAN         shift, and go to state 52
    GREATER_THAN      shift, and go to state 53
    GREATER_OR_EQUAL  shift, and go to state 54
    LESS_OR_EQUAL     shift, and go to state 55

<<<<<<< HEAD
    $default  reduce using rule 54 (equality_expression)
=======
    $default  reduce using rule 53 (equality_expression)
>>>>>>> 4e3db8006b6c74e9df9bcca8d60edee58729d27e


State 89

   56 relational_expression: relational_expression LESS_THAN shift_expression .
   61 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   62                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 56
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 57

    $default  reduce using rule 56 (relational_expression)


State 90

   57 relational_expression: relational_expression GREATER_THAN shift_expression .
   61 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   62                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 56
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 57

    $default  reduce using rule 57 (relational_expression)


State 91

   59 relational_expression: relational_expression GREATER_OR_EQUAL shift_expression .
   61 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   62                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 56
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 57

    $default  reduce using rule 59 (relational_expression)


State 92

   58 relational_expression: relational_expression LESS_OR_EQUAL shift_expression .
   61 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   62                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 56
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 57

    $default  reduce using rule 58 (relational_expression)


State 93

   62 shift_expression: shift_expression T_LOGICAL_RIGHT_SHIFT additive_expression .
   64 additive_expression: additive_expression . PLUS multiplicative_expression
   65                    | additive_expression . MINUS multiplicative_expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    $default  reduce using rule 62 (shift_expression)


State 94

   61 shift_expression: shift_expression T_LOGICAL_LEFT_SHIFT additive_expression .
   64 additive_expression: additive_expression . PLUS multiplicative_expression
   65                    | additive_expression . MINUS multiplicative_expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    $default  reduce using rule 61 (shift_expression)


State 95

   64 additive_expression: additive_expression PLUS multiplicative_expression .
   67 multiplicative_expression: multiplicative_expression . ASTERIX unary_expression
   68                          | multiplicative_expression . R_SLASH unary_expression
   69                          | multiplicative_expression . PERCENT unary_expression

    ASTERIX  shift, and go to state 60
    R_SLASH  shift, and go to state 61
    PERCENT  shift, and go to state 62

    $default  reduce using rule 64 (additive_expression)


State 96

   65 additive_expression: additive_expression MINUS multiplicative_expression .
   67 multiplicative_expression: multiplicative_expression . ASTERIX unary_expression
   68                          | multiplicative_expression . R_SLASH unary_expression
   69                          | multiplicative_expression . PERCENT unary_expression

    ASTERIX  shift, and go to state 60
    R_SLASH  shift, and go to state 61
    PERCENT  shift, and go to state 62

    $default  reduce using rule 65 (additive_expression)


State 97

   67 multiplicative_expression: multiplicative_expression ASTERIX unary_expression .

    $default  reduce using rule 67 (multiplicative_expression)


State 98

   68 multiplicative_expression: multiplicative_expression R_SLASH unary_expression .

    $default  reduce using rule 68 (multiplicative_expression)


State 99

   69 multiplicative_expression: multiplicative_expression PERCENT unary_expression .

    $default  reduce using rule 69 (multiplicative_expression)


State 100

   39 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 39 (assignment_expression)


State 101

   17 compound_statement: L_SQUILY R_SQUIRLY .

    $default  reduce using rule 17 (compound_statement)


State 102

   10 declaration: T_INT . IDENTIFIER SEMI_COLON
   11            | T_INT . IDENTIFIER EQUAL expression SEMI_COLON

    IDENTIFIER  shift, and go to state 112


State 103

   21 return_statement: T_RETURN . SEMI_COLON
   22                 | T_RETURN . expression SEMI_COLON

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    SEMI_COLON     shift, and go to state 113
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    expression                 go to state 114
    assignment_expression      go to state 23
    conditional_expression     go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 35


State 104

    9 declarations: declarations . declaration
   19 compound_statement: L_SQUILY declarations . R_SQUIRLY
   20                   | L_SQUILY declarations . statements R_SQUIRLY

    R_SQUIRLY   shift, and go to state 115
    L_SQUILY    shift, and go to state 75
    T_INT       shift, and go to state 102
    T_RETURN    shift, and go to state 103
    IDENTIFIER  shift, and go to state 2

    declaration         go to state 116
    statements          go to state 117
    statement           go to state 107
    compound_statement  go to state 108
    return_statement    go to state 109


State 105

    8 declarations: declaration .

    $default  reduce using rule 8 (declarations)


State 106

   14 statements: statements . statement
   18 compound_statement: L_SQUILY statements . R_SQUIRLY

    R_SQUIRLY  shift, and go to state 118
    L_SQUILY   shift, and go to state 75
    T_RETURN   shift, and go to state 103

    statement           go to state 119
    compound_statement  go to state 108
    return_statement    go to state 109


State 107

   13 statements: statement .

    $default  reduce using rule 13 (statements)


State 108

   15 statement: compound_statement .

    $default  reduce using rule 15 (statement)


State 109

   16 statement: return_statement .

    $default  reduce using rule 16 (statement)


State 110

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA . T_INT IDENTIFIER R_BRACKET compound_statement

    T_INT  shift, and go to state 120


State 111

   41 conditional_expression: logical_or_expression QUESTION_MARK expression COLON . conditional_expression

    DECREMENT_OP   shift, and go to state 15
    INCREMENT_OP   shift, and go to state 16
    T_SIZEOF       shift, and go to state 17
    IDENTIFIER     shift, and go to state 18
    T_INTEGER_VAL  shift, and go to state 19
    '('            shift, and go to state 20

    primary_expression         go to state 21
    conditional_expression     go to state 121
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    inclusive_or_expression    go to state 27
    exclusive_or_expression    go to state 28
    and_expression             go to state 29
    equality_expression        go to state 30
    relational_expression      go to state 31
    shift_expression           go to state 32
    additive_expression        go to state 33
    multiplicative_expression  go to state 34
    unary_expression           go to state 81


State 112

   10 declaration: T_INT IDENTIFIER . SEMI_COLON
   11            | T_INT IDENTIFIER . EQUAL expression SEMI_COLON

    SEMI_COLON  shift, and go to state 13
    EQUAL       shift, and go to state 14


State 113

   21 return_statement: T_RETURN SEMI_COLON .

    $default  reduce using rule 21 (return_statement)


State 114

   22 return_statement: T_RETURN expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 122


State 115

   19 compound_statement: L_SQUILY declarations R_SQUIRLY .

    $default  reduce using rule 19 (compound_statement)


State 116

    9 declarations: declarations declaration .

    $default  reduce using rule 9 (declarations)


State 117

   14 statements: statements . statement
   20 compound_statement: L_SQUILY declarations statements . R_SQUIRLY

    R_SQUIRLY  shift, and go to state 123
    L_SQUILY   shift, and go to state 75
    T_RETURN   shift, and go to state 103

    statement           go to state 119
    compound_statement  go to state 108
    return_statement    go to state 109


State 118

   18 compound_statement: L_SQUILY statements R_SQUIRLY .

    $default  reduce using rule 18 (compound_statement)


State 119

   14 statements: statements statement .

    $default  reduce using rule 14 (statements)


State 120

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA T_INT . IDENTIFIER R_BRACKET compound_statement

    IDENTIFIER  shift, and go to state 124


State 121

   41 conditional_expression: logical_or_expression QUESTION_MARK expression COLON conditional_expression .

    $default  reduce using rule 41 (conditional_expression)


State 122

   22 return_statement: T_RETURN expression SEMI_COLON .

    $default  reduce using rule 22 (return_statement)


State 123

   20 compound_statement: L_SQUILY declarations statements R_SQUIRLY .

    $default  reduce using rule 20 (compound_statement)


State 124

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA T_INT IDENTIFIER . R_BRACKET compound_statement

    R_BRACKET  shift, and go to state 125


State 125

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET . compound_statement

    L_SQUILY  shift, and go to state 75

    compound_statement  go to state 126


State 126

    7 function_definition: T_INT IDENTIFIER L_BRACKET T_INT IDENTIFIER COMMA T_INT IDENTIFIER R_BRACKET compound_statement .

    $default  reduce using rule 7 (function_definition)
