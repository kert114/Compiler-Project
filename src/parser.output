Nonterminals useless in grammar

    jump_statement
    FUNCTION_NAME


Terminals unused in grammar

    EQUAL_TO
    T_WHILE
    T_FOR
    T_DO
    T_IF
    T_ELSE
    T_CASE
    T_SWITCH
    T_BREAK
    T_VOID
    T_DOUBLE
    T_CHAR
    T_LONG
    T_FLOAT
    T_SHORT
    T_ENUM
    T_CONTINUE
    T_DEFAULT
    T_STRUCT
    T_SIGNED
    T_UNSIGNED
    T_TYPEDEF
    T_VOLATILE
    T_FLOAT_VAL
    T_INTEGER_VAL
    RIGHT_ASSIGN
    LEFT_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    parameter_types
    abstract_declarator


Rules useless in grammar

  108 jump_statement: T_CONTINUE SEMI_COLON
  109               | T_BREAK SEMI_COLON


State 12 conflicts: 1 shift/reduce
State 23 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 root: translation_unit

    2 translation_unit: external_declaration
    3                 | translation_unit external_declaration

    4 function_definition: type_specifier IDENTIFIER L_BRACKET declarator R_BRACKET compound_statement
    5                    | type_specifier IDENTIFIER L_BRACKET R_BRACKET compound_statement

    6 identifier_list: IDENTIFIER
    7                | identifier_list COMMA IDENTIFIER

    8 external_declaration: function_definition
    9                     | declaration

   10 declaration: type_specifier SEMI_COLON
   11            | type_specifier init_declarators SEMI_COLON

   12 declarator: pointer direct_declarator
   13           | direct_declarator

   14 declarations: declaration
   15             | declarations COMMA declaration

   16 direct_declarator: IDENTIFIER
   17                  | L_BRACKET declarator R_BRACKET
   18                  | direct_declarator L_SQUARE constant_expression R_BRACKET
   19                  | direct_declarator L_BRACKET parameters R_BRACKET
   20                  | direct_declarator L_BRACKET identifier_list R_BRACKET
   21                  | direct_declarator L_BRACKET R_BRACKET
   22                  | direct_declarator L_SQUARE R_SQUARE

   23 init_declarators: init_declarator
   24                 | init_declarators COMMA init_declarator

   25 init_declarator: declarator
   26                | declarator EQUAL initializer

   27 initializer: assignment_expression
   28            | L_SQUIRLY initializer_list R_SQUIRLY
   29            | L_SQUIRLY initializer_list COMMA R_SQUIRLY

   30 initializer_list: initializer
   31                 | initializer_list COMMA initializer

   32 parameters: parameter_declaration
   33           | parameters COMMA parameter_declaration
   34           | %empty

   35 parameter_declaration: type_specifier declarator

   36 compound_statement: L_SQUIRLY R_SQUIRLY
   37                   | L_SQUIRLY statements R_SQUIRLY
   38                   | L_SQUIRLY declarations R_SQUIRLY
   39                   | L_SQUIRLY statements declarations R_SQUIRLY

   40 statements: statement
   41           | statements statement

   42 statement: compound_statement
   43          | return_statement

   44 return_statement: T_RETURN SEMI_COLON
   45                 | T_RETURN argument_expressions_list SEMI_COLON

   46 unary_operator: AMPERSAND
   47               | ASTERIX
   48               | PLUS
   49               | MINUS
   50               | TILDA
   51               | EXCLAIMATION

   52 type_specifier: T_INT

   53 expression: assignment_expression
   54           | expression COMMA assignment_expression

   55 assignment_expression: conditional_expression
   56                      | unary_expression assignment_operator assignment_expression

   57 conditional_expression: logical_or_expression
   58                       | logical_or_expression QUESTION_MARK expression COLON conditional_expression

   59 argument_expressions_list: assignment_expression
   60                          | argument_expressions_list COMMA assignment_expression

   61 constant_expression: conditional_expression

   62 primary_expression: IDENTIFIER
   63                   | CONSTANT
   64                   | T_VARIABLE
   65                   | L_BRACKET expression R_BRACKET

   66 logical_and_expression: inclusive_or_expression
   67                       | logical_and_expression T_LOGICAL_AND inclusive_or_expression

   68 logical_or_expression: logical_and_expression
   69                      | logical_or_expression T_LOGICAL_OR logical_and_expression

   70 exclusive_or_expression: and_expression
   71                        | exclusive_or_expression HAT and_expression

   72 inclusive_or_expression: exclusive_or_expression
   73                        | inclusive_or_expression UPRIGHT_SLASH exclusive_or_expression

   74 and_expression: equality_expression
   75               | and_expression AMPERSAND equality_expression

   76 equality_expression: relational_expression
   77                    | equality_expression EQUAL relational_expression
   78                    | equality_expression NOT_EQUAL relational_expression

   79 relational_expression: shift_expression
   80                      | relational_expression LESS_THAN shift_expression
   81                      | relational_expression GREATER_THAN shift_expression
   82                      | relational_expression LESS_OR_EQUAL shift_expression
   83                      | relational_expression GREATER_OR_EQUAL shift_expression

   84 shift_expression: additive_expression
   85                 | shift_expression T_LOGICAL_LEFT_SHIFT additive_expression
   86                 | shift_expression T_LOGICAL_RIGHT_SHIFT additive_expression

   87 additive_expression: multiplicative_expression
   88                    | additive_expression PLUS multiplicative_expression
   89                    | additive_expression MINUS multiplicative_expression

   90 multiplicative_expression: cast_expression
   91                          | multiplicative_expression ASTERIX cast_expression
   92                          | multiplicative_expression R_SLASH cast_expression
   93                          | multiplicative_expression PERCENT cast_expression

   94 cast_expression: unary_expression

   95 unary_expression: postfix_expression
   96                 | INCREMENT_OP unary_expression
   97                 | DECREMENT_OP unary_expression
   98                 | unary_operator cast_expression
   99                 | T_SIZEOF unary_expression

  100 postfix_expression: primary_expression
  101                   | postfix_expression L_SQUARE expression R_SQUARE
  102                   | postfix_expression L_BRACKET R_BRACKET
  103                   | postfix_expression L_BRACKET argument_expressions_list R_BRACKET
  104                   | postfix_expression DECIMAL IDENTIFIER
  105                   | postfix_expression PTR_OP IDENTIFIER
  106                   | postfix_expression INCREMENT_OP
  107                   | postfix_expression DECREMENT_OP


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ASTERIX (258) 47 91
    R_SLASH (259) 92
    PLUS (260) 48 88
    MINUS (261) 49 89
    PERCENT (262) 93
    LESS_THAN (263) 80
    GREATER_THAN (264) 81
    GREATER_OR_EQUAL (265) 83
    LESS_OR_EQUAL (266) 82
    EQUAL_TO (267)
    NOT_EQUAL (268) 78
    DECREMENT_OP (269) 97 107
    INCREMENT_OP (270) 96 106
    T_LOGICAL_AND (271) 67
    T_LOGICAL_OR (272) 69
    T_LOGICAL_RIGHT_SHIFT (273) 86
    T_LOGICAL_LEFT_SHIFT (274) 85
    L_BRACKET (275) 4 5 17 19 20 21 65 102 103
    R_BRACKET (276) 4 5 17 18 19 20 21 65 102 103
    L_SQUIRLY (277) 28 29 36 37 38 39
    R_SQUIRLY (278) 28 29 36 37 38 39
    L_SQUARE (279) 18 22 101
    R_SQUARE (280) 22 101
    T_WHILE (281)
    T_FOR (282)
    T_DO (283)
    T_IF (284)
    T_ELSE (285)
    T_CASE (286)
    T_SWITCH (287)
    T_BREAK (288)
    T_INT <expr> (289) 52
    T_VOID (290)
    T_DOUBLE (291)
    T_CHAR (292)
    T_LONG (293)
    T_FLOAT <expr> (294)
    T_SHORT (295)
    T_ENUM (296)
    T_SIZEOF (297) 99
    T_CONTINUE (298)
    T_DEFAULT (299)
    T_STRUCT (300)
    T_SIGNED (301)
    T_UNSIGNED (302)
    T_TYPEDEF (303)
    T_VOLATILE (304)
    T_RETURN (305) 44 45
    T_FLOAT_VAL <number> (306)
    T_VARIABLE <string> (307) 64
    T_INTEGER_VAL <number> (308)
    SEMI_COLON (309) 10 11 44 45
    COMMA (310) 7 15 24 29 31 33 54 60
    COLON (311) 58
    DECIMAL (312) 104
    AMPERSAND (313) 46 75
    EXCLAIMATION (314) 51
    TILDA (315) 50
    HAT (316) 71
    UPRIGHT_SLASH (317) 73
    QUESTION_MARK (318) 58
    PTR_OP (319) 105
    EQUAL (320) 26 77
    RIGHT_ASSIGN (321)
    LEFT_ASSIGN (322)
    ADD_ASSIGN (323)
    SUB_ASSIGN (324)
    MUL_ASSIGN (325)
    DIV_ASSIGN (326)
    MOD_ASSIGN (327)
    AND_ASSIGN (328)
    XOR_ASSIGN (329)
    OR_ASSIGN (330)
    IDENTIFIER <expr> (331) 4 5 6 7 16 62 104 105
    CONSTANT (332) 63
    parameter_types <expr> (333)
    abstract_declarator <expr> (334)
    pointer <expr> (335) 12
    assignment_operator <expr> (336) 56


Nonterminals, with rules where they appear

    $accept (82)
        on left: 0
    root (83)
        on left: 1
        on right: 0
    translation_unit <expr> (84)
        on left: 2 3
        on right: 1 3
    function_definition <expr> (85)
        on left: 4 5
        on right: 8
    identifier_list <expr> (86)
        on left: 6 7
        on right: 7 20
    external_declaration <expr> (87)
        on left: 8 9
        on right: 2 3
    declaration <expr> (88)
        on left: 10 11
        on right: 9 14 15
    declarator <expr> (89)
        on left: 12 13
        on right: 4 17 25 26 35
    declarations <expr> (90)
        on left: 14 15
        on right: 15 38 39
    direct_declarator <expr> (91)
        on left: 16 17 18 19 20 21 22
        on right: 12 13 18 19 20 21 22
    init_declarators <expr> (92)
        on left: 23 24
        on right: 11 24
    init_declarator <expr> (93)
        on left: 25 26
        on right: 23 24
    initializer <expr> (94)
        on left: 27 28 29
        on right: 26 30 31
    initializer_list <expr> (95)
        on left: 30 31
        on right: 28 29 31
    parameters <expr> (96)
        on left: 32 33 34
        on right: 19 33
    parameter_declaration <expr> (97)
        on left: 35
        on right: 32 33
    compound_statement <expr> (98)
        on left: 36 37 38 39
        on right: 4 5 42
    statements <expr> (99)
        on left: 40 41
        on right: 37 39 41
    statement <expr> (100)
        on left: 42 43
        on right: 40 41
    return_statement <expr> (101)
        on left: 44 45
        on right: 43
    unary_operator (102)
        on left: 46 47 48 49 50 51
        on right: 98
    type_specifier <expr> (103)
        on left: 52
        on right: 4 5 10 11 35
    expression <expr> (104)
        on left: 53 54
        on right: 54 58 65 101
    assignment_expression <expr> (105)
        on left: 55 56
        on right: 27 53 54 56 59 60
    conditional_expression <expr> (106)
        on left: 57 58
        on right: 55 58 61
    argument_expressions_list <expr> (107)
        on left: 59 60
        on right: 45 60 103
    constant_expression (108)
        on left: 61
        on right: 18
    primary_expression <expr> (109)
        on left: 62 63 64 65
        on right: 100
    logical_and_expression (110)
        on left: 66 67
        on right: 67 68 69
    logical_or_expression <expr> (111)
        on left: 68 69
        on right: 57 58 69
    exclusive_or_expression <expr> (112)
        on left: 70 71
        on right: 71 72 73
    inclusive_or_expression <expr> (113)
        on left: 72 73
        on right: 66 67 73
    and_expression (114)
        on left: 74 75
        on right: 70 71 75
    equality_expression <expr> (115)
        on left: 76 77 78
        on right: 74 75 77 78
    relational_expression <expr> (116)
        on left: 79 80 81 82 83
        on right: 76 77 78 80 81 82 83
    shift_expression <expr> (117)
        on left: 84 85 86
        on right: 79 80 81 82 83 85 86
    additive_expression <expr> (118)
        on left: 87 88 89
        on right: 84 85 86 88 89
    multiplicative_expression <expr> (119)
        on left: 90 91 92 93
        on right: 87 88 89 91 92 93
    cast_expression <expr> (120)
        on left: 94
        on right: 90 91 92 93 98
    unary_expression <expr> (121)
        on left: 95 96 97 98 99
        on right: 56 94 96 97 99
    postfix_expression <expr> (122)
        on left: 100 101 102 103 104 105 106 107
        on right: 95 101 102 103 104 105 106 107


State 0

    0 $accept: . root $end

    T_INT  shift, and go to state 1

    root                  go to state 2
    translation_unit      go to state 3
    function_definition   go to state 4
    external_declaration  go to state 5
    declaration           go to state 6
    type_specifier        go to state 7


State 1

   52 type_specifier: T_INT .

    $default  reduce using rule 52 (type_specifier)


State 2

    0 $accept: root . $end

    $end  shift, and go to state 8


State 3

    1 root: translation_unit .
    3 translation_unit: translation_unit . external_declaration

    T_INT  shift, and go to state 1

    $default  reduce using rule 1 (root)

    function_definition   go to state 4
    external_declaration  go to state 9
    declaration           go to state 6
    type_specifier        go to state 7


State 4

    8 external_declaration: function_definition .

    $default  reduce using rule 8 (external_declaration)


State 5

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 6

    9 external_declaration: declaration .

    $default  reduce using rule 9 (external_declaration)


State 7

    4 function_definition: type_specifier . IDENTIFIER L_BRACKET declarator R_BRACKET compound_statement
    5                    | type_specifier . IDENTIFIER L_BRACKET R_BRACKET compound_statement
   10 declaration: type_specifier . SEMI_COLON
   11            | type_specifier . init_declarators SEMI_COLON

    L_BRACKET   shift, and go to state 10
    SEMI_COLON  shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    pointer     shift, and go to state 13

    declarator         go to state 14
    direct_declarator  go to state 15
    init_declarators   go to state 16
    init_declarator    go to state 17


State 8

    0 $accept: root $end .

    $default  accept


State 9

    3 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 3 (translation_unit)


State 10

   17 direct_declarator: L_BRACKET . declarator R_BRACKET

    L_BRACKET   shift, and go to state 10
    IDENTIFIER  shift, and go to state 18
    pointer     shift, and go to state 13

    declarator         go to state 19
    direct_declarator  go to state 15


State 11

   10 declaration: type_specifier SEMI_COLON .

    $default  reduce using rule 10 (declaration)


State 12

    4 function_definition: type_specifier IDENTIFIER . L_BRACKET declarator R_BRACKET compound_statement
    5                    | type_specifier IDENTIFIER . L_BRACKET R_BRACKET compound_statement
   16 direct_declarator: IDENTIFIER .

    L_BRACKET  shift, and go to state 20

    L_BRACKET  [reduce using rule 16 (direct_declarator)]
    $default   reduce using rule 16 (direct_declarator)


State 13

   12 declarator: pointer . direct_declarator

    L_BRACKET   shift, and go to state 10
    IDENTIFIER  shift, and go to state 18

    direct_declarator  go to state 21


State 14

   25 init_declarator: declarator .
   26                | declarator . EQUAL initializer

    EQUAL  shift, and go to state 22

    $default  reduce using rule 25 (init_declarator)


State 15

   13 declarator: direct_declarator .
   18 direct_declarator: direct_declarator . L_SQUARE constant_expression R_BRACKET
   19                  | direct_declarator . L_BRACKET parameters R_BRACKET
   20                  | direct_declarator . L_BRACKET identifier_list R_BRACKET
   21                  | direct_declarator . L_BRACKET R_BRACKET
   22                  | direct_declarator . L_SQUARE R_SQUARE

    L_BRACKET  shift, and go to state 23
    L_SQUARE   shift, and go to state 24

    $default  reduce using rule 13 (declarator)


State 16

   11 declaration: type_specifier init_declarators . SEMI_COLON
   24 init_declarators: init_declarators . COMMA init_declarator

    SEMI_COLON  shift, and go to state 25
    COMMA       shift, and go to state 26


State 17

   23 init_declarators: init_declarator .

    $default  reduce using rule 23 (init_declarators)


State 18

   16 direct_declarator: IDENTIFIER .

    $default  reduce using rule 16 (direct_declarator)


State 19

   17 direct_declarator: L_BRACKET declarator . R_BRACKET

    R_BRACKET  shift, and go to state 27


State 20

    4 function_definition: type_specifier IDENTIFIER L_BRACKET . declarator R_BRACKET compound_statement
    5                    | type_specifier IDENTIFIER L_BRACKET . R_BRACKET compound_statement

    L_BRACKET   shift, and go to state 10
    R_BRACKET   shift, and go to state 28
    IDENTIFIER  shift, and go to state 18
    pointer     shift, and go to state 13

    declarator         go to state 29
    direct_declarator  go to state 15


State 21

   12 declarator: pointer direct_declarator .
   18 direct_declarator: direct_declarator . L_SQUARE constant_expression R_BRACKET
   19                  | direct_declarator . L_BRACKET parameters R_BRACKET
   20                  | direct_declarator . L_BRACKET identifier_list R_BRACKET
   21                  | direct_declarator . L_BRACKET R_BRACKET
   22                  | direct_declarator . L_SQUARE R_SQUARE

    L_BRACKET  shift, and go to state 23
    L_SQUARE   shift, and go to state 24

    $default  reduce using rule 12 (declarator)


State 22

   26 init_declarator: declarator EQUAL . initializer

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    L_SQUIRLY     shift, and go to state 36
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    initializer                go to state 44
    unary_operator             go to state 45
    assignment_expression      go to state 46
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 23

   19 direct_declarator: direct_declarator L_BRACKET . parameters R_BRACKET
   20                  | direct_declarator L_BRACKET . identifier_list R_BRACKET
   21                  | direct_declarator L_BRACKET . R_BRACKET

    R_BRACKET   shift, and go to state 62
    T_INT       shift, and go to state 1
    IDENTIFIER  shift, and go to state 63

    R_BRACKET  [reduce using rule 34 (parameters)]
    $default   reduce using rule 34 (parameters)

    identifier_list        go to state 64
    parameters             go to state 65
    parameter_declaration  go to state 66
    type_specifier         go to state 67


State 24

   18 direct_declarator: direct_declarator L_SQUARE . constant_expression R_BRACKET
   22                  | direct_declarator L_SQUARE . R_SQUARE

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    R_SQUARE      shift, and go to state 68
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    conditional_expression     go to state 69
    constant_expression        go to state 70
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 25

   11 declaration: type_specifier init_declarators SEMI_COLON .

    $default  reduce using rule 11 (declaration)


State 26

   24 init_declarators: init_declarators COMMA . init_declarator

    L_BRACKET   shift, and go to state 10
    IDENTIFIER  shift, and go to state 18
    pointer     shift, and go to state 13

    declarator         go to state 14
    direct_declarator  go to state 15
    init_declarator    go to state 72


State 27

   17 direct_declarator: L_BRACKET declarator R_BRACKET .

    $default  reduce using rule 17 (direct_declarator)


State 28

    5 function_definition: type_specifier IDENTIFIER L_BRACKET R_BRACKET . compound_statement

    L_SQUIRLY  shift, and go to state 73

    compound_statement  go to state 74


State 29

    4 function_definition: type_specifier IDENTIFIER L_BRACKET declarator . R_BRACKET compound_statement

    R_BRACKET  shift, and go to state 75


State 30

   47 unary_operator: ASTERIX .

    $default  reduce using rule 47 (unary_operator)


State 31

   48 unary_operator: PLUS .

    $default  reduce using rule 48 (unary_operator)


State 32

   49 unary_operator: MINUS .

    $default  reduce using rule 49 (unary_operator)


State 33

   97 unary_expression: DECREMENT_OP . unary_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    unary_expression    go to state 76
    postfix_expression  go to state 61


State 34

   96 unary_expression: INCREMENT_OP . unary_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    unary_expression    go to state 77
    postfix_expression  go to state 61


State 35

   65 primary_expression: L_BRACKET . expression R_BRACKET

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    expression                 go to state 78
    assignment_expression      go to state 79
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 36

   28 initializer: L_SQUIRLY . initializer_list R_SQUIRLY
   29            | L_SQUIRLY . initializer_list COMMA R_SQUIRLY

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    L_SQUIRLY     shift, and go to state 36
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    initializer                go to state 80
    initializer_list           go to state 81
    unary_operator             go to state 45
    assignment_expression      go to state 46
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 37

   99 unary_expression: T_SIZEOF . unary_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    unary_expression    go to state 82
    postfix_expression  go to state 61


State 38

   64 primary_expression: T_VARIABLE .

    $default  reduce using rule 64 (primary_expression)


State 39

   46 unary_operator: AMPERSAND .

    $default  reduce using rule 46 (unary_operator)


State 40

   51 unary_operator: EXCLAIMATION .

    $default  reduce using rule 51 (unary_operator)


State 41

   50 unary_operator: TILDA .

    $default  reduce using rule 50 (unary_operator)


State 42

   62 primary_expression: IDENTIFIER .

    $default  reduce using rule 62 (primary_expression)


State 43

   63 primary_expression: CONSTANT .

    $default  reduce using rule 63 (primary_expression)


State 44

   26 init_declarator: declarator EQUAL initializer .

    $default  reduce using rule 26 (init_declarator)


State 45

   98 unary_expression: unary_operator . cast_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    cast_expression     go to state 83
    unary_expression    go to state 71
    postfix_expression  go to state 61


State 46

   27 initializer: assignment_expression .

    $default  reduce using rule 27 (initializer)


State 47

   55 assignment_expression: conditional_expression .

    $default  reduce using rule 55 (assignment_expression)


State 48

  100 postfix_expression: primary_expression .

    $default  reduce using rule 100 (postfix_expression)


State 49

   67 logical_and_expression: logical_and_expression . T_LOGICAL_AND inclusive_or_expression
   68 logical_or_expression: logical_and_expression .

    T_LOGICAL_AND  shift, and go to state 84

    $default  reduce using rule 68 (logical_or_expression)


State 50

   57 conditional_expression: logical_or_expression .
   58                       | logical_or_expression . QUESTION_MARK expression COLON conditional_expression
   69 logical_or_expression: logical_or_expression . T_LOGICAL_OR logical_and_expression

    T_LOGICAL_OR   shift, and go to state 85
    QUESTION_MARK  shift, and go to state 86

    $default  reduce using rule 57 (conditional_expression)


State 51

   71 exclusive_or_expression: exclusive_or_expression . HAT and_expression
   72 inclusive_or_expression: exclusive_or_expression .

    HAT  shift, and go to state 87

    $default  reduce using rule 72 (inclusive_or_expression)


State 52

   66 logical_and_expression: inclusive_or_expression .
   73 inclusive_or_expression: inclusive_or_expression . UPRIGHT_SLASH exclusive_or_expression

    UPRIGHT_SLASH  shift, and go to state 88

    $default  reduce using rule 66 (logical_and_expression)


State 53

   70 exclusive_or_expression: and_expression .
   75 and_expression: and_expression . AMPERSAND equality_expression

    AMPERSAND  shift, and go to state 89

    $default  reduce using rule 70 (exclusive_or_expression)


State 54

   74 and_expression: equality_expression .
   77 equality_expression: equality_expression . EQUAL relational_expression
   78                    | equality_expression . NOT_EQUAL relational_expression

    NOT_EQUAL  shift, and go to state 90
    EQUAL      shift, and go to state 91

    $default  reduce using rule 74 (and_expression)


State 55

   76 equality_expression: relational_expression .
   80 relational_expression: relational_expression . LESS_THAN shift_expression
   81                      | relational_expression . GREATER_THAN shift_expression
   82                      | relational_expression . LESS_OR_EQUAL shift_expression
   83                      | relational_expression . GREATER_OR_EQUAL shift_expression

    LESS_THAN         shift, and go to state 92
    GREATER_THAN      shift, and go to state 93
    GREATER_OR_EQUAL  shift, and go to state 94
    LESS_OR_EQUAL     shift, and go to state 95

    $default  reduce using rule 76 (equality_expression)


State 56

   79 relational_expression: shift_expression .
   85 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   86                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 96
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 97

    $default  reduce using rule 79 (relational_expression)


State 57

   84 shift_expression: additive_expression .
   88 additive_expression: additive_expression . PLUS multiplicative_expression
   89                    | additive_expression . MINUS multiplicative_expression

    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99

    $default  reduce using rule 84 (shift_expression)


State 58

   87 additive_expression: multiplicative_expression .
   91 multiplicative_expression: multiplicative_expression . ASTERIX cast_expression
   92                          | multiplicative_expression . R_SLASH cast_expression
   93                          | multiplicative_expression . PERCENT cast_expression

    ASTERIX  shift, and go to state 100
    R_SLASH  shift, and go to state 101
    PERCENT  shift, and go to state 102

    $default  reduce using rule 87 (additive_expression)


State 59

   90 multiplicative_expression: cast_expression .

    $default  reduce using rule 90 (multiplicative_expression)


State 60

   56 assignment_expression: unary_expression . assignment_operator assignment_expression
   94 cast_expression: unary_expression .

    assignment_operator  shift, and go to state 103

    $default  reduce using rule 94 (cast_expression)


State 61

   95 unary_expression: postfix_expression .
  101 postfix_expression: postfix_expression . L_SQUARE expression R_SQUARE
  102                   | postfix_expression . L_BRACKET R_BRACKET
  103                   | postfix_expression . L_BRACKET argument_expressions_list R_BRACKET
  104                   | postfix_expression . DECIMAL IDENTIFIER
  105                   | postfix_expression . PTR_OP IDENTIFIER
  106                   | postfix_expression . INCREMENT_OP
  107                   | postfix_expression . DECREMENT_OP

    DECREMENT_OP  shift, and go to state 104
    INCREMENT_OP  shift, and go to state 105
    L_BRACKET     shift, and go to state 106
    L_SQUARE      shift, and go to state 107
    DECIMAL       shift, and go to state 108
    PTR_OP        shift, and go to state 109

    $default  reduce using rule 95 (unary_expression)


State 62

   21 direct_declarator: direct_declarator L_BRACKET R_BRACKET .

    $default  reduce using rule 21 (direct_declarator)


State 63

    6 identifier_list: IDENTIFIER .

    $default  reduce using rule 6 (identifier_list)


State 64

    7 identifier_list: identifier_list . COMMA IDENTIFIER
   20 direct_declarator: direct_declarator L_BRACKET identifier_list . R_BRACKET

    R_BRACKET  shift, and go to state 110
    COMMA      shift, and go to state 111


State 65

   19 direct_declarator: direct_declarator L_BRACKET parameters . R_BRACKET
   33 parameters: parameters . COMMA parameter_declaration

    R_BRACKET  shift, and go to state 112
    COMMA      shift, and go to state 113


State 66

   32 parameters: parameter_declaration .

    $default  reduce using rule 32 (parameters)


State 67

   35 parameter_declaration: type_specifier . declarator

    L_BRACKET   shift, and go to state 10
    IDENTIFIER  shift, and go to state 18
    pointer     shift, and go to state 13

    declarator         go to state 114
    direct_declarator  go to state 15


State 68

   22 direct_declarator: direct_declarator L_SQUARE R_SQUARE .

    $default  reduce using rule 22 (direct_declarator)


State 69

   61 constant_expression: conditional_expression .

    $default  reduce using rule 61 (constant_expression)


State 70

   18 direct_declarator: direct_declarator L_SQUARE constant_expression . R_BRACKET

    R_BRACKET  shift, and go to state 115


State 71

   94 cast_expression: unary_expression .

    $default  reduce using rule 94 (cast_expression)


State 72

   24 init_declarators: init_declarators COMMA init_declarator .

    $default  reduce using rule 24 (init_declarators)


State 73

   36 compound_statement: L_SQUIRLY . R_SQUIRLY
   37                   | L_SQUIRLY . statements R_SQUIRLY
   38                   | L_SQUIRLY . declarations R_SQUIRLY
   39                   | L_SQUIRLY . statements declarations R_SQUIRLY

    L_SQUIRLY  shift, and go to state 73
    R_SQUIRLY  shift, and go to state 116
    T_INT      shift, and go to state 1
    T_RETURN   shift, and go to state 117

    declaration         go to state 118
    declarations        go to state 119
    compound_statement  go to state 120
    statements          go to state 121
    statement           go to state 122
    return_statement    go to state 123
    type_specifier      go to state 124


State 74

    5 function_definition: type_specifier IDENTIFIER L_BRACKET R_BRACKET compound_statement .

    $default  reduce using rule 5 (function_definition)


State 75

    4 function_definition: type_specifier IDENTIFIER L_BRACKET declarator R_BRACKET . compound_statement

    L_SQUIRLY  shift, and go to state 73

    compound_statement  go to state 125


State 76

   97 unary_expression: DECREMENT_OP unary_expression .

    $default  reduce using rule 97 (unary_expression)


State 77

   96 unary_expression: INCREMENT_OP unary_expression .

    $default  reduce using rule 96 (unary_expression)


State 78

   54 expression: expression . COMMA assignment_expression
   65 primary_expression: L_BRACKET expression . R_BRACKET

    R_BRACKET  shift, and go to state 126
    COMMA      shift, and go to state 127


State 79

   53 expression: assignment_expression .

    $default  reduce using rule 53 (expression)


State 80

   30 initializer_list: initializer .

    $default  reduce using rule 30 (initializer_list)


State 81

   28 initializer: L_SQUIRLY initializer_list . R_SQUIRLY
   29            | L_SQUIRLY initializer_list . COMMA R_SQUIRLY
   31 initializer_list: initializer_list . COMMA initializer

    R_SQUIRLY  shift, and go to state 128
    COMMA      shift, and go to state 129


State 82

   99 unary_expression: T_SIZEOF unary_expression .

    $default  reduce using rule 99 (unary_expression)


State 83

   98 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 98 (unary_expression)


State 84

   67 logical_and_expression: logical_and_expression T_LOGICAL_AND . inclusive_or_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 130
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 85

   69 logical_or_expression: logical_or_expression T_LOGICAL_OR . logical_and_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    logical_and_expression     go to state 131
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 86

   58 conditional_expression: logical_or_expression QUESTION_MARK . expression COLON conditional_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    expression                 go to state 132
    assignment_expression      go to state 79
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 87

   71 exclusive_or_expression: exclusive_or_expression HAT . and_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    and_expression             go to state 133
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 88

   73 inclusive_or_expression: inclusive_or_expression UPRIGHT_SLASH . exclusive_or_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    exclusive_or_expression    go to state 134
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 89

   75 and_expression: and_expression AMPERSAND . equality_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    equality_expression        go to state 135
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 90

   78 equality_expression: equality_expression NOT_EQUAL . relational_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    relational_expression      go to state 136
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 91

   77 equality_expression: equality_expression EQUAL . relational_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    relational_expression      go to state 137
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 92

   80 relational_expression: relational_expression LESS_THAN . shift_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    shift_expression           go to state 138
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 93

   81 relational_expression: relational_expression GREATER_THAN . shift_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    shift_expression           go to state 139
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 94

   83 relational_expression: relational_expression GREATER_OR_EQUAL . shift_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    shift_expression           go to state 140
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 95

   82 relational_expression: relational_expression LESS_OR_EQUAL . shift_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    shift_expression           go to state 141
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 96

   86 shift_expression: shift_expression T_LOGICAL_RIGHT_SHIFT . additive_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    additive_expression        go to state 142
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 97

   85 shift_expression: shift_expression T_LOGICAL_LEFT_SHIFT . additive_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    additive_expression        go to state 143
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 98

   88 additive_expression: additive_expression PLUS . multiplicative_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    multiplicative_expression  go to state 144
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 99

   89 additive_expression: additive_expression MINUS . multiplicative_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    primary_expression         go to state 48
    multiplicative_expression  go to state 145
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 100

   91 multiplicative_expression: multiplicative_expression ASTERIX . cast_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    cast_expression     go to state 146
    unary_expression    go to state 71
    postfix_expression  go to state 61


State 101

   92 multiplicative_expression: multiplicative_expression R_SLASH . cast_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    cast_expression     go to state 147
    unary_expression    go to state 71
    postfix_expression  go to state 61


State 102

   93 multiplicative_expression: multiplicative_expression PERCENT . cast_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator      go to state 45
    primary_expression  go to state 48
    cast_expression     go to state 148
    unary_expression    go to state 71
    postfix_expression  go to state 61


State 103

   56 assignment_expression: unary_expression assignment_operator . assignment_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    assignment_expression      go to state 149
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 104

  107 postfix_expression: postfix_expression DECREMENT_OP .

    $default  reduce using rule 107 (postfix_expression)


State 105

  106 postfix_expression: postfix_expression INCREMENT_OP .

    $default  reduce using rule 106 (postfix_expression)


State 106

  102 postfix_expression: postfix_expression L_BRACKET . R_BRACKET
  103                   | postfix_expression L_BRACKET . argument_expressions_list R_BRACKET

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    R_BRACKET     shift, and go to state 150
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    assignment_expression      go to state 151
    conditional_expression     go to state 47
    argument_expressions_list  go to state 152
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 107

  101 postfix_expression: postfix_expression L_SQUARE . expression R_SQUARE

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    expression                 go to state 153
    assignment_expression      go to state 79
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 108

  104 postfix_expression: postfix_expression DECIMAL . IDENTIFIER

    IDENTIFIER  shift, and go to state 154


State 109

  105 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 155


State 110

   20 direct_declarator: direct_declarator L_BRACKET identifier_list R_BRACKET .

    $default  reduce using rule 20 (direct_declarator)


State 111

    7 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 156


State 112

   19 direct_declarator: direct_declarator L_BRACKET parameters R_BRACKET .

    $default  reduce using rule 19 (direct_declarator)


State 113

   33 parameters: parameters COMMA . parameter_declaration

    T_INT  shift, and go to state 1

    parameter_declaration  go to state 157
    type_specifier         go to state 67


State 114

   35 parameter_declaration: type_specifier declarator .

    $default  reduce using rule 35 (parameter_declaration)


State 115

   18 direct_declarator: direct_declarator L_SQUARE constant_expression R_BRACKET .

    $default  reduce using rule 18 (direct_declarator)


State 116

   36 compound_statement: L_SQUIRLY R_SQUIRLY .

    $default  reduce using rule 36 (compound_statement)


State 117

   44 return_statement: T_RETURN . SEMI_COLON
   45                 | T_RETURN . argument_expressions_list SEMI_COLON

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    SEMI_COLON    shift, and go to state 158
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    assignment_expression      go to state 151
    conditional_expression     go to state 47
    argument_expressions_list  go to state 159
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 118

   14 declarations: declaration .

    $default  reduce using rule 14 (declarations)


State 119

   15 declarations: declarations . COMMA declaration
   38 compound_statement: L_SQUIRLY declarations . R_SQUIRLY

    R_SQUIRLY  shift, and go to state 160
    COMMA      shift, and go to state 161


State 120

   42 statement: compound_statement .

    $default  reduce using rule 42 (statement)


State 121

   37 compound_statement: L_SQUIRLY statements . R_SQUIRLY
   39                   | L_SQUIRLY statements . declarations R_SQUIRLY
   41 statements: statements . statement

    L_SQUIRLY  shift, and go to state 73
    R_SQUIRLY  shift, and go to state 162
    T_INT      shift, and go to state 1
    T_RETURN   shift, and go to state 117

    declaration         go to state 118
    declarations        go to state 163
    compound_statement  go to state 120
    statement           go to state 164
    return_statement    go to state 123
    type_specifier      go to state 124


State 122

   40 statements: statement .

    $default  reduce using rule 40 (statements)


State 123

   43 statement: return_statement .

    $default  reduce using rule 43 (statement)


State 124

   10 declaration: type_specifier . SEMI_COLON
   11            | type_specifier . init_declarators SEMI_COLON

    L_BRACKET   shift, and go to state 10
    SEMI_COLON  shift, and go to state 11
    IDENTIFIER  shift, and go to state 18
    pointer     shift, and go to state 13

    declarator         go to state 14
    direct_declarator  go to state 15
    init_declarators   go to state 16
    init_declarator    go to state 17


State 125

    4 function_definition: type_specifier IDENTIFIER L_BRACKET declarator R_BRACKET compound_statement .

    $default  reduce using rule 4 (function_definition)


State 126

   65 primary_expression: L_BRACKET expression R_BRACKET .

    $default  reduce using rule 65 (primary_expression)


State 127

   54 expression: expression COMMA . assignment_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    assignment_expression      go to state 165
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 128

   28 initializer: L_SQUIRLY initializer_list R_SQUIRLY .

    $default  reduce using rule 28 (initializer)


State 129

   29 initializer: L_SQUIRLY initializer_list COMMA . R_SQUIRLY
   31 initializer_list: initializer_list COMMA . initializer

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    L_SQUIRLY     shift, and go to state 36
    R_SQUIRLY     shift, and go to state 166
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    initializer                go to state 167
    unary_operator             go to state 45
    assignment_expression      go to state 46
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 130

   67 logical_and_expression: logical_and_expression T_LOGICAL_AND inclusive_or_expression .
   73 inclusive_or_expression: inclusive_or_expression . UPRIGHT_SLASH exclusive_or_expression

    UPRIGHT_SLASH  shift, and go to state 88

    $default  reduce using rule 67 (logical_and_expression)


State 131

   67 logical_and_expression: logical_and_expression . T_LOGICAL_AND inclusive_or_expression
   69 logical_or_expression: logical_or_expression T_LOGICAL_OR logical_and_expression .

    T_LOGICAL_AND  shift, and go to state 84

    $default  reduce using rule 69 (logical_or_expression)


State 132

   54 expression: expression . COMMA assignment_expression
   58 conditional_expression: logical_or_expression QUESTION_MARK expression . COLON conditional_expression

    COMMA  shift, and go to state 127
    COLON  shift, and go to state 168


State 133

   71 exclusive_or_expression: exclusive_or_expression HAT and_expression .
   75 and_expression: and_expression . AMPERSAND equality_expression

    AMPERSAND  shift, and go to state 89

    $default  reduce using rule 71 (exclusive_or_expression)


State 134

   71 exclusive_or_expression: exclusive_or_expression . HAT and_expression
   73 inclusive_or_expression: inclusive_or_expression UPRIGHT_SLASH exclusive_or_expression .

    HAT  shift, and go to state 87

    $default  reduce using rule 73 (inclusive_or_expression)


State 135

   75 and_expression: and_expression AMPERSAND equality_expression .
   77 equality_expression: equality_expression . EQUAL relational_expression
   78                    | equality_expression . NOT_EQUAL relational_expression

    NOT_EQUAL  shift, and go to state 90
    EQUAL      shift, and go to state 91

    $default  reduce using rule 75 (and_expression)


State 136

   78 equality_expression: equality_expression NOT_EQUAL relational_expression .
   80 relational_expression: relational_expression . LESS_THAN shift_expression
   81                      | relational_expression . GREATER_THAN shift_expression
   82                      | relational_expression . LESS_OR_EQUAL shift_expression
   83                      | relational_expression . GREATER_OR_EQUAL shift_expression

    LESS_THAN         shift, and go to state 92
    GREATER_THAN      shift, and go to state 93
    GREATER_OR_EQUAL  shift, and go to state 94
    LESS_OR_EQUAL     shift, and go to state 95

    $default  reduce using rule 78 (equality_expression)


State 137

   77 equality_expression: equality_expression EQUAL relational_expression .
   80 relational_expression: relational_expression . LESS_THAN shift_expression
   81                      | relational_expression . GREATER_THAN shift_expression
   82                      | relational_expression . LESS_OR_EQUAL shift_expression
   83                      | relational_expression . GREATER_OR_EQUAL shift_expression

    LESS_THAN         shift, and go to state 92
    GREATER_THAN      shift, and go to state 93
    GREATER_OR_EQUAL  shift, and go to state 94
    LESS_OR_EQUAL     shift, and go to state 95

    $default  reduce using rule 77 (equality_expression)


State 138

   80 relational_expression: relational_expression LESS_THAN shift_expression .
   85 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   86                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 96
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 97

    $default  reduce using rule 80 (relational_expression)


State 139

   81 relational_expression: relational_expression GREATER_THAN shift_expression .
   85 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   86                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 96
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 97

    $default  reduce using rule 81 (relational_expression)


State 140

   83 relational_expression: relational_expression GREATER_OR_EQUAL shift_expression .
   85 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   86                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 96
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 97

    $default  reduce using rule 83 (relational_expression)


State 141

   82 relational_expression: relational_expression LESS_OR_EQUAL shift_expression .
   85 shift_expression: shift_expression . T_LOGICAL_LEFT_SHIFT additive_expression
   86                 | shift_expression . T_LOGICAL_RIGHT_SHIFT additive_expression

    T_LOGICAL_RIGHT_SHIFT  shift, and go to state 96
    T_LOGICAL_LEFT_SHIFT   shift, and go to state 97

    $default  reduce using rule 82 (relational_expression)


State 142

   86 shift_expression: shift_expression T_LOGICAL_RIGHT_SHIFT additive_expression .
   88 additive_expression: additive_expression . PLUS multiplicative_expression
   89                    | additive_expression . MINUS multiplicative_expression

    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99

    $default  reduce using rule 86 (shift_expression)


State 143

   85 shift_expression: shift_expression T_LOGICAL_LEFT_SHIFT additive_expression .
   88 additive_expression: additive_expression . PLUS multiplicative_expression
   89                    | additive_expression . MINUS multiplicative_expression

    PLUS   shift, and go to state 98
    MINUS  shift, and go to state 99

    $default  reduce using rule 85 (shift_expression)


State 144

   88 additive_expression: additive_expression PLUS multiplicative_expression .
   91 multiplicative_expression: multiplicative_expression . ASTERIX cast_expression
   92                          | multiplicative_expression . R_SLASH cast_expression
   93                          | multiplicative_expression . PERCENT cast_expression

    ASTERIX  shift, and go to state 100
    R_SLASH  shift, and go to state 101
    PERCENT  shift, and go to state 102

    $default  reduce using rule 88 (additive_expression)


State 145

   89 additive_expression: additive_expression MINUS multiplicative_expression .
   91 multiplicative_expression: multiplicative_expression . ASTERIX cast_expression
   92                          | multiplicative_expression . R_SLASH cast_expression
   93                          | multiplicative_expression . PERCENT cast_expression

    ASTERIX  shift, and go to state 100
    R_SLASH  shift, and go to state 101
    PERCENT  shift, and go to state 102

    $default  reduce using rule 89 (additive_expression)


State 146

   91 multiplicative_expression: multiplicative_expression ASTERIX cast_expression .

    $default  reduce using rule 91 (multiplicative_expression)


State 147

   92 multiplicative_expression: multiplicative_expression R_SLASH cast_expression .

    $default  reduce using rule 92 (multiplicative_expression)


State 148

   93 multiplicative_expression: multiplicative_expression PERCENT cast_expression .

    $default  reduce using rule 93 (multiplicative_expression)


State 149

   56 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 56 (assignment_expression)


State 150

  102 postfix_expression: postfix_expression L_BRACKET R_BRACKET .

    $default  reduce using rule 102 (postfix_expression)


State 151

   59 argument_expressions_list: assignment_expression .

    $default  reduce using rule 59 (argument_expressions_list)


State 152

   60 argument_expressions_list: argument_expressions_list . COMMA assignment_expression
  103 postfix_expression: postfix_expression L_BRACKET argument_expressions_list . R_BRACKET

    R_BRACKET  shift, and go to state 169
    COMMA      shift, and go to state 170


State 153

   54 expression: expression . COMMA assignment_expression
  101 postfix_expression: postfix_expression L_SQUARE expression . R_SQUARE

    R_SQUARE  shift, and go to state 171
    COMMA     shift, and go to state 127


State 154

  104 postfix_expression: postfix_expression DECIMAL IDENTIFIER .

    $default  reduce using rule 104 (postfix_expression)


State 155

  105 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 105 (postfix_expression)


State 156

    7 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 7 (identifier_list)


State 157

   33 parameters: parameters COMMA parameter_declaration .

    $default  reduce using rule 33 (parameters)


State 158

   44 return_statement: T_RETURN SEMI_COLON .

    $default  reduce using rule 44 (return_statement)


State 159

   45 return_statement: T_RETURN argument_expressions_list . SEMI_COLON
   60 argument_expressions_list: argument_expressions_list . COMMA assignment_expression

    SEMI_COLON  shift, and go to state 172
    COMMA       shift, and go to state 170


State 160

   38 compound_statement: L_SQUIRLY declarations R_SQUIRLY .

    $default  reduce using rule 38 (compound_statement)


State 161

   15 declarations: declarations COMMA . declaration

    T_INT  shift, and go to state 1

    declaration     go to state 173
    type_specifier  go to state 124


State 162

   37 compound_statement: L_SQUIRLY statements R_SQUIRLY .

    $default  reduce using rule 37 (compound_statement)


State 163

   15 declarations: declarations . COMMA declaration
   39 compound_statement: L_SQUIRLY statements declarations . R_SQUIRLY

    R_SQUIRLY  shift, and go to state 174
    COMMA      shift, and go to state 161


State 164

   41 statements: statements statement .

    $default  reduce using rule 41 (statements)


State 165

   54 expression: expression COMMA assignment_expression .

    $default  reduce using rule 54 (expression)


State 166

   29 initializer: L_SQUIRLY initializer_list COMMA R_SQUIRLY .

    $default  reduce using rule 29 (initializer)


State 167

   31 initializer_list: initializer_list COMMA initializer .

    $default  reduce using rule 31 (initializer_list)


State 168

   58 conditional_expression: logical_or_expression QUESTION_MARK expression COLON . conditional_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    conditional_expression     go to state 175
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 71
    postfix_expression         go to state 61


State 169

  103 postfix_expression: postfix_expression L_BRACKET argument_expressions_list R_BRACKET .

    $default  reduce using rule 103 (postfix_expression)


State 170

   60 argument_expressions_list: argument_expressions_list COMMA . assignment_expression

    ASTERIX       shift, and go to state 30
    PLUS          shift, and go to state 31
    MINUS         shift, and go to state 32
    DECREMENT_OP  shift, and go to state 33
    INCREMENT_OP  shift, and go to state 34
    L_BRACKET     shift, and go to state 35
    T_SIZEOF      shift, and go to state 37
    T_VARIABLE    shift, and go to state 38
    AMPERSAND     shift, and go to state 39
    EXCLAIMATION  shift, and go to state 40
    TILDA         shift, and go to state 41
    IDENTIFIER    shift, and go to state 42
    CONSTANT      shift, and go to state 43

    unary_operator             go to state 45
    assignment_expression      go to state 176
    conditional_expression     go to state 47
    primary_expression         go to state 48
    logical_and_expression     go to state 49
    logical_or_expression      go to state 50
    exclusive_or_expression    go to state 51
    inclusive_or_expression    go to state 52
    and_expression             go to state 53
    equality_expression        go to state 54
    relational_expression      go to state 55
    shift_expression           go to state 56
    additive_expression        go to state 57
    multiplicative_expression  go to state 58
    cast_expression            go to state 59
    unary_expression           go to state 60
    postfix_expression         go to state 61


State 171

  101 postfix_expression: postfix_expression L_SQUARE expression R_SQUARE .

    $default  reduce using rule 101 (postfix_expression)


State 172

   45 return_statement: T_RETURN argument_expressions_list SEMI_COLON .

    $default  reduce using rule 45 (return_statement)


State 173

   15 declarations: declarations COMMA declaration .

    $default  reduce using rule 15 (declarations)


State 174

   39 compound_statement: L_SQUIRLY statements declarations R_SQUIRLY .

    $default  reduce using rule 39 (compound_statement)


State 175

   58 conditional_expression: logical_or_expression QUESTION_MARK expression COLON conditional_expression .

    $default  reduce using rule 58 (conditional_expression)


State 176

   60 argument_expressions_list: argument_expressions_list COMMA assignment_expression .

    $default  reduce using rule 60 (argument_expressions_list)
